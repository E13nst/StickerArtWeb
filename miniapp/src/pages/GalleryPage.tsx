import React, { useEffect, useState, useCallback, useMemo } from 'react';
import { useTelegram } from '../hooks/useTelegram';
import { useStickerStore } from '../store/useStickerStore';
import { apiClient } from '../api/client';
import { StickerSetResponse } from '../types/sticker';
import { getStickerThumbnailUrl } from '../utils/stickerUtils';

// –ù–æ–≤—ã–µ Telegram-style –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { TelegramLayout } from '../components/TelegramLayout';
import { TelegramStickerCard } from '../components/TelegramStickerCard';
import { AnimatedSticker } from '../components/AnimatedSticker';
import { LoadingSpinner } from '../components/LoadingSpinner';
import { ErrorDisplay } from '../components/ErrorDisplay';
import { EmptyState } from '../components/EmptyState';
import { DebugPanel } from '../components/DebugPanel';
import { StickerPackModal } from '../components/StickerPackModal';

// –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–∞–ª–µ—Ä–µ–∏
import { GalleryGrid } from '../components/GalleryGrid';
import { adaptStickerSetsToGalleryPacks } from '../utils/galleryAdapter';

export const GalleryPage: React.FC = () => {
  const { tg, user, initData, isReady, isInTelegramApp, isMockMode, checkInitDataExpiry } = useTelegram();
  const {
    isLoading,
    isAuthLoading,
    stickerSets,
    error,
    setLoading,
    setAuthLoading,
    setStickerSets,
    setAuthStatus,
    setError,
    setAuthError,
  } = useStickerStore();

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedStickerSet, setSelectedStickerSet] = useState<StickerSetResponse | null>(null);
  const [isDetailOpen, setDetailOpen] = useState(false);
  const [manualInitData, setManualInitData] = useState<string>('');
  const [useNewGallery, setUseNewGallery] = useState(true); // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞

  // –ó–∞–≥—Ä—É–∑–∫–∞ initData –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const urlInitData = urlParams.get('initData');
    const storedInitData = localStorage.getItem('telegram_init_data');
    const extensionInitData = apiClient.checkExtensionHeaders();
    
    if (urlInitData) {
      setManualInitData(decodeURIComponent(urlInitData));
      localStorage.setItem('telegram_init_data', decodeURIComponent(urlInitData));
    } else if (storedInitData) {
      setManualInitData(storedInitData);
    } else if (extensionInitData) {
      // initData —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    }
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const checkAuth = useCallback(async () => {
    const currentInitData = manualInitData || initData;

    if (!isInTelegramApp && !manualInitData && !currentInitData) {
      console.log('‚úÖ –†–µ–∂–∏–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (dev mode)');
      setAuthStatus({
        authenticated: true,
        role: 'public'
      });
      return true;
    }
    
    if (!currentInitData) {
      console.log('‚ö†Ô∏è initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      setAuthStatus({
        authenticated: false,
        role: 'anonymous'
      });
      return false;
    }

    setAuthLoading(true);
    setAuthError(null);

    try {
      const isTestData = currentInitData.includes('query_id=test');
      if (!isTestData) {
        const initDataCheck = checkInitDataExpiry(currentInitData);
        if (!initDataCheck.valid) {
          throw new Error(initDataCheck.reason);
        }
      }

      apiClient.setAuthHeaders(currentInitData);
      const authResponse = await apiClient.checkAuthStatus();
      setAuthStatus(authResponse);

      if (!authResponse.authenticated) {
        throw new Error(authResponse.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }

      return true;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setAuthError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      
      // –í dev —Ä–µ–∂–∏–º–µ –∏–ª–∏ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
      if (isMockMode || !isInTelegramApp) {
        console.log('üîß –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ dev —Ä–µ–∂–∏–º–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É API');
        setAuthStatus({
          authenticated: true,
          role: 'public'
        });
        return true;
      }
      
      return false;
    } finally {
      setAuthLoading(false);
    }
  }, [manualInitData, initData, isInTelegramApp, isMockMode, checkInitDataExpiry]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
  const fetchStickerSets = async (page: number = 0) => {
    setLoading(true);
    setError(null);

    try {
      const isAuthenticated = await checkAuth();
      if (!isAuthenticated && isInTelegramApp && !isMockMode) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      const response = await apiClient.getStickerSets(page);
      setStickerSets(response.content || []);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤';
      
      // –í dev —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      if (isMockMode || !isInTelegramApp) {
        console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', errorMessage);
        setStickerSets([]); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      } else {
        setError(errorMessage);
      }
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
  const searchStickerSets = async (query: string) => {
    if (!query.trim()) {
      fetchStickerSets();
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await apiClient.searchStickerSets(query);
      setStickerSets(response.content || []);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleViewStickerSet = (id: number | string) => {
    // Haptic feedback
    if (tg?.HapticFeedback) {
      tg.HapticFeedback.impactOccurred('medium');
    }
    
    const stickerSet = stickerSets.find(s => s.id.toString() === id.toString());
    if (stickerSet) {
      setSelectedStickerSet(stickerSet);
      setDetailOpen(true);
    }
  };

  const handleBackToList = () => {
    // Haptic feedback
    if (tg?.HapticFeedback) {
      tg.HapticFeedback.impactOccurred('light');
    }
    
    setDetailOpen(false);
    setSelectedStickerSet(null);
  };

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newSearchTerm = e.target.value;
    setSearchTerm(newSearchTerm);
    
    const delayedSearch = setTimeout(() => {
      searchStickerSets(newSearchTerm);
    }, 500);

    return () => clearTimeout(delayedSearch);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  const filteredStickerSets = useMemo(() => 
    stickerSets.filter(stickerSet =>
      stickerSet.title.toLowerCase().includes(searchTerm.toLowerCase())
    ), [stickerSets, searchTerm]
  );

  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
  const galleryPacks = useMemo(() => 
    adaptStickerSetsToGalleryPacks(filteredStickerSets), 
    [filteredStickerSets]
  );

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    if (isReady) {
      fetchStickerSets();
    }
  }, [isReady, manualInitData]);

  if (!isReady) {
    return <LoadingSpinner message="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..." />;
  }

  // –î–µ—Ç–∞–ª—å–Ω–∞—è –º–æ–¥–∞–ª–∫–∞ –ø–æ–≤–µ—Ä—Ö —Å–ø–∏—Å–∫–∞

  return (
    <>
      <TelegramLayout>
        {/* User Info Badge */}
        {user && (
          <div className="tg-user-badge fade-in">
            <div className="tg-user-badge__avatar">
              {user.first_name.charAt(0)}
            </div>
            <div className="tg-user-badge__info">
              <div className="tg-user-badge__name">
                {user.first_name} {user.last_name || ''}
              </div>
              {user.username && (
                <div className="tg-user-badge__username">@{user.username}</div>
              )}
            </div>
            {isMockMode && (
              <div className="tg-user-badge__mock-badge">DEV</div>
            )}
          </div>
        )}

        {/* Search Bar */}
        <div className="tg-search fade-in">
          <input
            type="text"
            className="tg-search__input"
            placeholder="üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤..."
            value={searchTerm}
            onChange={handleSearchChange}
            disabled={isLoading}
          />
        </div>

        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∞ –≥–∞–ª–µ—Ä–µ–∏ */}
        <div style={{ 
          display: 'flex', 
          gap: '8px', 
          marginBottom: '16px',
          padding: '0 16px'
        }}>
          <button
            onClick={() => setUseNewGallery(true)}
            style={{
              padding: '8px 16px',
              background: useNewGallery ? 'var(--tg-theme-button-color)' : 'var(--tg-theme-secondary-bg-color)',
              color: useNewGallery ? 'var(--tg-theme-button-text-color)' : 'var(--tg-theme-text-color)',
              border: 'none',
              borderRadius: 'var(--tg-radius-m)',
              fontSize: 'var(--tg-font-size-s)',
              cursor: 'pointer',
              transition: 'all 0.2s ease'
            }}
          >
            üé® –ù–æ–≤–∞—è –≥–∞–ª–µ—Ä–µ—è
          </button>
          <button
            onClick={() => setUseNewGallery(false)}
            style={{
              padding: '8px 16px',
              background: !useNewGallery ? 'var(--tg-theme-button-color)' : 'var(--tg-theme-secondary-bg-color)',
              color: !useNewGallery ? 'var(--tg-theme-button-text-color)' : 'var(--tg-theme-text-color)',
              border: 'none',
              borderRadius: 'var(--tg-radius-m)',
              fontSize: 'var(--tg-font-size-s)',
              cursor: 'pointer',
              transition: 'all 0.2s ease'
            }}
          >
            üìã –°–ø–∏—Å–æ–∫
          </button>
        </div>

        {/* Content */}
        {isLoading ? (
          <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤..." />
        ) : error ? (
          <ErrorDisplay error={error} onRetry={() => fetchStickerSets()} />
        ) : filteredStickerSets.length === 0 ? (
          <EmptyState
            title="üé® –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            message={searchTerm ? '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤'}
            actionLabel="–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä"
            onAction={() => {
              if (tg) {
                tg.openTelegramLink('https://t.me/StickerGalleryBot');
              }
            }}
          />
        ) : useNewGallery ? (
          <div className="fade-in" style={{ height: 'calc(100vh - 200px)' }}>
            <GalleryGrid
              packs={galleryPacks}
              onPackClick={handleViewStickerSet}
              height={600}
            />
          </div>
        ) : (
          <div className="fade-in" style={{ paddingBottom: '60px' }}>
            {filteredStickerSets.map((stickerSet, index) => (
              <TelegramStickerCard
                key={stickerSet.id}
                title={stickerSet.title}
                description={`–°–æ–∑–¥–∞–Ω–æ: ${new Date(stickerSet.createdAt).toLocaleDateString()}`}
                stickerCount={stickerSet.telegramStickerSetInfo?.stickers.length || 0}
                previewStickers={stickerSet.telegramStickerSetInfo?.stickers.slice(0, 4).map(s => ({
                  id: s.file_id,
                  thumbnailUrl: getStickerThumbnailUrl(s.file_id),
                  emoji: s.emoji,
                  isAnimated: s.is_animated
                })) || []}
                onClick={() => handleViewStickerSet(stickerSet.id)}
                priority={index < 3 ? 'high' : 'low'}
              />
            ))}
          </div>
        )}
      </TelegramLayout>
      <DebugPanel initData={initData} />
      <StickerPackModal open={isDetailOpen} stickerSet={selectedStickerSet} onClose={handleBackToList} />
    </>
  );
};
