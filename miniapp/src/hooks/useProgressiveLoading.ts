import { useState, useEffect, useCallback, useRef } from 'react';
import { imageLoader, LoadPriority } from '../utils/imageLoader';

interface ProgressiveLoadingState {
  loadedImages: string[];
  currentImageIndex: number;
  isLoading: boolean;
  isFirstImageLoaded: boolean;
  hasError: boolean;
}

interface ProgressiveLoadingOptions {
  packId: string;
  selectedPosters: Array<{ fileId: string; url: string; isAnimated?: boolean; emoji?: string }>;
  isHighPriority?: boolean;
  isVisible?: boolean;
  onImageLoaded?: (imageUrl: string, index: number) => void;
  onAllImagesLoaded?: () => void;
}

export const useProgressiveLoading = ({
  packId,
  selectedPosters,
  isHighPriority = false,
  isVisible = true,
  onImageLoaded,
  onAllImagesLoaded
}: ProgressiveLoadingOptions) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ selectedPosters —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
  const safeSelectedPosters = selectedPosters || [];
  
  // –†–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const [loadedImages, setLoadedImages] = useState<string[]>([]);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [isFirstImageLoaded, setIsFirstImageLoaded] = useState(false);
  const [hasError, setHasError] = useState(false);

  const loadingRef = useRef<{
    currentIndex: number;
    isProcessing: boolean;
    abortController: AbortController | null;
  }>({
    currentIndex: 0,
    isProcessing: false,
    abortController: null
  });

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const loadFirstImageOptimized = useCallback(async () => {
    if (safeSelectedPosters.length === 0 || isFirstImageLoaded) return;
    
    const firstPoster = safeSelectedPosters[0];
    if (!firstPoster) return;

    setIsLoading(prev => {
      if (!prev) {
        return true;
      }
      return prev;
    });
    setHasError(prev => {
      if (prev) {
        return false;
      }
      return prev;
    });

    try {
      const priority = isHighPriority ? LoadPriority.TIER_2_FIRST_IMAGE : LoadPriority.TIER_3_ADDITIONAL;
      const imageUrl = await imageLoader.loadImage(
        firstPoster.fileId,
        firstPoster.url,
        priority,
        packId,
        0
      );

      setLoadedImages(prev => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (prev.includes(imageUrl)) {
          return prev;
        }
        return [imageUrl];
      });
      setIsFirstImageLoaded(prev => {
        if (!prev) {
          return true;
        }
        return prev;
      });
      setIsLoading(prev => {
        if (prev) {
          return false;
        }
        return prev;
      });
      setHasError(prev => {
        if (prev) {
          return false;
        }
        return prev;
      });

      onImageLoaded?.(imageUrl, 0);
      console.log(`üé® First image loaded for pack ${packId}:`, imageUrl);
    } catch (error) {
      console.warn('Failed to load first image:', error);
      setIsLoading(prev => {
        if (prev) {
          return false;
        }
        return prev;
      });
      setHasError(prev => {
        if (!prev) {
          return true;
        }
        return prev;
      });
    }
  }, [packId, safeSelectedPosters, isHighPriority, onImageLoaded, isFirstImageLoaded]);

  // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const loadNextImage = useCallback(async () => {
    if (loadingRef.current.isProcessing || safeSelectedPosters.length <= loadedImages.length) {
      return;
    }

    const nextIndex = loadedImages.length;
    const nextPoster = safeSelectedPosters[nextIndex];
    if (!nextPoster) return;

    loadingRef.current.isProcessing = true;
    loadingRef.current.currentIndex = nextIndex;

    try {
      const priority = isHighPriority ? LoadPriority.TIER_3_ADDITIONAL : LoadPriority.TIER_4_BACKGROUND;
      const imageUrl = await imageLoader.loadImage(
        nextPoster.fileId,
        nextPoster.url,
        priority,
        packId,
        nextIndex
      );

      setLoadedImages(prev => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (prev.includes(imageUrl)) {
          return prev;
        }
        return [...prev, imageUrl];
      });

      onImageLoaded?.(imageUrl, nextIndex);
      console.log(`‚úÖ Additional image ${nextIndex + 1} loaded for pack ${packId}:`, imageUrl);

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (loadedImages.length + 1 >= safeSelectedPosters.length) {
        onAllImagesLoaded?.();
        console.log(`üéâ All images loaded for pack ${packId}`);
      }
    } catch (error) {
      console.warn(`Failed to load image ${nextIndex + 1}:`, error);
    } finally {
      loadingRef.current.isProcessing = false;
    }
  }, [packId, safeSelectedPosters, loadedImages.length, isHighPriority, onImageLoaded, onAllImagesLoaded]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
  useEffect(() => {
    if (!isVisible || !isFirstImageLoaded || loadingRef.current.isProcessing) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    if (loadedImages.length >= safeSelectedPosters.length) {
      return;
    }

    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
    const timer = setTimeout(() => {
      loadNextImage();
    }, isHighPriority ? 300 : 800);

    return () => clearTimeout(timer);
  }, [isVisible, isFirstImageLoaded, loadedImages.length, loadNextImage, isHighPriority, safeSelectedPosters.length]);

  // –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  useEffect(() => {
    if (isVisible && !isFirstImageLoaded && !isLoading && safeSelectedPosters.length > 0) {
      loadFirstImageOptimized();
    }
  }, [isVisible, isFirstImageLoaded, isLoading, loadFirstImageOptimized, safeSelectedPosters.length]);

  // –°–ª–∞–π–¥—à–æ—É - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
  useEffect(() => {
    if (loadedImages.length < 2) return;

    const interval = setInterval(() => {
      setCurrentImageIndex(prev => {
        const newIndex = (prev + 1) % loadedImages.length;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–Ω–¥–µ–∫—Å
        if (prev !== newIndex) {
          return newIndex;
        }
        return prev;
      });
    }, 4000); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏

    return () => clearInterval(interval);
  }, [loadedImages.length]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (loadingRef.current.abortController) {
        loadingRef.current.abortController.abort();
      }
    };
  }, []);

  // –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const loadNextImageManually = useCallback(() => {
    if (!loadingRef.current.isProcessing) {
      loadNextImage();
    }
  }, [loadNextImage]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const reset = useCallback(() => {
    setLoadedImages(prev => {
      if (prev.length > 0) {
        return [];
      }
      return prev;
    });
    setCurrentImageIndex(prev => {
      if (prev !== 0) {
        return 0;
      }
      return prev;
    });
    setIsLoading(prev => {
      if (prev) {
        return false;
      }
      return prev;
    });
    setIsFirstImageLoaded(prev => {
      if (prev) {
        return false;
      }
      return prev;
    });
    setHasError(prev => {
      if (prev) {
        return false;
      }
      return prev;
    });
    loadingRef.current = {
      currentIndex: 0,
      isProcessing: false,
      abortController: null
    };
  }, []);

  return {
    loadedImages,
    currentImageIndex,
    isLoading,
    isFirstImageLoaded,
    hasError,
    shouldShowSlideshow: loadedImages.length > 1,
    loadNextImageManually,
    reset,
    canLoadMore: loadedImages.length < safeSelectedPosters.length,
    totalImages: safeSelectedPosters.length,
    progress: safeSelectedPosters.length > 0 ? (loadedImages.length / safeSelectedPosters.length) * 100 : 0
  };
};



