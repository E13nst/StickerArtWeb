import { useState, useEffect, useCallback, useRef } from 'react';

interface CacheItem<T> {
  data: T;
  timestamp: number;
  accessCount: number;
  lastAccessed: number;
}

interface SmartCacheOptions {
  maxSize?: number;
  ttl?: number; // Time to live –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  preloadNext?: boolean;
}

export const useSmartCache = <T>(options: SmartCacheOptions = {}) => {
  const {
    maxSize = 100,
    ttl = 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    preloadNext = true
  } = options;

  const cacheRef = useRef<Map<string, CacheItem<T>>>(new Map());
  const [cacheStats, setCacheStats] = useState({
    hits: 0,
    misses: 0,
    size: 0
  });

  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const cleanupExpired = useCallback(() => {
    const now = Date.now();
    const cache = cacheRef.current;
    
    for (const [key, item] of cache.entries()) {
      if (now - item.timestamp > ttl) {
        cache.delete(key);
      }
    }
    
    setCacheStats(prev => ({ ...prev, size: cache.size }));
  }, [ttl]);

  // LRU –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
  const evictLRU = useCallback(() => {
    const cache = cacheRef.current;
    if (cache.size <= maxSize) return;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –¥–æ—Å—Ç—É–ø—É
    const entries = Array.from(cache.entries());
    entries.sort((a, b) => a[1].lastAccessed - b[1].lastAccessed);
    
    // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
    const toRemove = entries.slice(0, cache.size - maxSize);
    toRemove.forEach(([key]) => cache.delete(key));
    
    setCacheStats(prev => ({ ...prev, size: cache.size }));
  }, [maxSize]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
  const get = useCallback((key: string): T | null => {
    const cache = cacheRef.current;
    const item = cache.get(key);
    
    if (!item) {
      setCacheStats(prev => ({ ...prev, misses: prev.misses + 1 }));
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
    if (Date.now() - item.timestamp > ttl) {
      cache.delete(key);
      setCacheStats(prev => ({ ...prev, misses: prev.misses + 1 }));
      return null;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
    item.accessCount++;
    item.lastAccessed = Date.now();
    
    setCacheStats(prev => ({ ...prev, hits: prev.hits + 1 }));
    return item.data;
  }, [ttl]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à
  const set = useCallback((key: string, data: T) => {
    const cache = cacheRef.current;
    
    cache.set(key, {
      data,
      timestamp: Date.now(),
      accessCount: 0,
      lastAccessed: Date.now()
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if (cache.size > maxSize) {
      evictLRU();
    }
    
    setCacheStats(prev => ({ ...prev, size: cache.size }));
  }, [maxSize, evictLRU]);

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const preloadNextPage = useCallback(async (
    currentPage: number,
    totalPages: number,
    fetchFunction: (page: number) => Promise<T>
  ) => {
    if (!preloadNext || currentPage >= totalPages - 1) return;

    const nextPageKey = `page_${currentPage + 1}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (cacheRef.current.has(nextPageKey)) return;

    try {
      console.log(`üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage + 1}...`);
      const data = await fetchFunction(currentPage + 1);
      set(nextPageKey, data);
      console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage + 1} –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
    } catch (error) {
      console.warn(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage + 1}:`, error);
    }
  }, [preloadNext, set]);

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const preloadImages = useCallback(async (imageUrls: string[]) => {
    const preloadPromises = imageUrls.map(url => {
      return new Promise<void>((resolve) => {
        const img = new Image();
        img.onload = () => resolve();
        img.onerror = () => resolve(); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        img.src = url;
      });
    });

    await Promise.allSettled(preloadPromises);
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  const clear = useCallback(() => {
    cacheRef.current.clear();
    setCacheStats({ hits: 0, misses: 0, size: 0 });
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const getStats = useCallback(() => {
    const cache = cacheRef.current;
    const hitRate = cacheStats.hits + cacheStats.misses > 0 
      ? (cacheStats.hits / (cacheStats.hits + cacheStats.misses) * 100).toFixed(1)
      : '0';
    
    return {
      ...cacheStats,
      hitRate: `${hitRate}%`,
      memoryUsage: cache.size
    };
  }, [cacheStats]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
  useEffect(() => {
    const interval = setInterval(cleanupExpired, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    return () => clearInterval(interval);
  }, [cleanupExpired]);

  return {
    get,
    set,
    preloadNextPage,
    preloadImages,
    clear,
    getStats,
    cacheSize: cacheStats.size
  };
};
