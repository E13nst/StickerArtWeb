import React, { useEffect, useState } from 'react';
import Lottie from 'lottie-react';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è Lottie –∞–Ω–∏–º–∞—Ü–∏–π
const animationCache = new Map<string, any>();

interface AnimatedStickerProps {
  fileId: string;
  imageUrl: string;
  emoji?: string;
  className?: string;
  hidePlaceholder?: boolean;
}

export const AnimatedSticker: React.FC<AnimatedStickerProps> = ({
  fileId,
  imageUrl,
  emoji,
  className,
  hidePlaceholder
}) => {
  const [animationData, setAnimationData] = useState<any>(null);
  const [error, setError] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let cancelled = false;

    const loadAnimation = async () => {
      try {
        setLoading(true);
        setError(false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
        if (!imageUrl || imageUrl === '') {
          console.log('üé¨ Invalid imageUrl, using fallback:', fileId);
          if (!cancelled) {
            setError(true);
            setLoading(false);
          }
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if (animationCache.has(fileId)) {
          console.log('üé¨ Loaded from cache:', fileId);
          if (!cancelled) {
            setAnimationData(animationCache.get(fileId));
            setLoading(false);
          }
          return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –∞–Ω–∏–º–∞—Ü–∏–∏
        const response = await fetch(imageUrl);
        
        if (!response.ok) {
          // –ï—Å–ª–∏ 404 –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback
          console.log('üé¨ Animation not found, using fallback:', fileId);
          if (!cancelled) {
            setError(true);
            setLoading(false);
          }
          return;
        }

        const contentType = response.headers.get('content-type');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON
        if (contentType && contentType.includes('application/json')) {
          const data = await response.json();
          
          if (!cancelled) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            animationCache.set(fileId, data);
            console.log('üé¨ Cached animation:', fileId);
            setAnimationData(data);
          }
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä, webp/png), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          console.log('üé¨ Not a JSON animation, using fallback:', fileId);
          if (!cancelled) {
            setError(true);
          }
        }
      } catch (err) {
        console.log('üé¨ Failed to load animation, using fallback:', fileId, err);
        if (!cancelled) {
          setError(true);
        }
      } finally {
        if (!cancelled) {
          setLoading(false);
        }
      }
    };

    loadAnimation();

    return () => {
      cancelled = true;
    };
  }, [fileId, imageUrl]);

  if (loading) {
    return (
      <div className={className} style={{ 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        fontSize: '48px' 
      }}>
        {hidePlaceholder ? null : (emoji || 'üé®')}
      </div>
    );
  }

  if (error || !animationData) {
    // Fallback - –ø—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return (
      <img
        src={imageUrl}
        alt={emoji || ''}
        className={className}
        style={{
          width: '100%',
          height: '100%',
          objectFit: 'cover'
        }}
        onError={(e) => {
          // –ï—Å–ª–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏
          console.log('üé¨ Image fallback failed, showing emoji:', fileId);
          const target = e.target as HTMLImageElement;
          target.style.display = 'none';
          const parent = target.parentElement;
          if (parent) {
            parent.innerHTML = `<div style="display: flex; align-items: center; justify-content: center; width: 100%; height: 100%; font-size: 48px;">${emoji || 'üé®'}</div>`;
          }
        }}
      />
    );
  }

  return (
    <Lottie
      animationData={animationData}
      loop={true}
      autoplay={true}
      className={className}
      style={{
        width: '100%',
        height: '100%',
      }}
    />
  );
};

