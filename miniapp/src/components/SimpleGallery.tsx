import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { PackCard } from './PackCard';
import { VirtualizedGallery } from './VirtualizedGallery';
import { useSmartCache } from '../hooks/useSmartCache';

interface Pack {
  id: string;
  title: string;
  previewStickers: Array<{
    fileId: string;
    url: string;
    isAnimated: boolean;
    emoji: string;
  }>;
}

interface SimpleGalleryProps {
  packs: Pack[];
  onPackClick?: (packId: string) => void;
  enablePreloading?: boolean;
  batchSize?: number;
  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  hasNextPage?: boolean;
  isLoadingMore?: boolean;
  onLoadMore?: () => void;
}

export const SimpleGallery: React.FC<SimpleGalleryProps> = ({
  packs,
  onPackClick,
  enablePreloading = true,
  batchSize = 20,
  hasNextPage = false,
  isLoadingMore = false,
  onLoadMore
}) => {
  const [visibleCount, setVisibleCount] = useState(batchSize);
  const [showSkeleton, setShowSkeleton] = useState(false);
  const [animatedItems, setAnimatedItems] = useState<Set<string>>(new Set());
  const [likeAnimations, setLikeAnimations] = useState<Map<string, boolean>>(new Map());
  
  // –£–º–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  const { 
    get: getCachedData, 
    set: setCachedData, 
    preloadNextPage, 
    preloadImages,
    getStats,
    cacheSize 
  } = useSmartCache({
    maxSize: 200,
    ttl: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    preloadNext: true
  });
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ)
  const getVirtualizationThreshold = useCallback(() => {
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –ø–æ—Ä–æ–≥ –Ω–∏–∂–µ
    const isMobile = window.innerWidth < 768;
    return isMobile ? 50 : 100;
  }, []);

  const virtualizationThreshold = getVirtualizationThreshold();
  const shouldUseVirtualization = packs.length > virtualizationThreshold;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º skeleton –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ
  useEffect(() => {
    setShowSkeleton(packs.length === 0);
  }, [packs.length]);

  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–æ–≤
  useEffect(() => {
    if (packs.length > 0) {
      const cacheKey = `packs_${packs.length}`;
      setCachedData(cacheKey, packs);
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–≤—ã—Ö 6 –ø–∞–∫–æ–≤
      const firstSixPacks = packs.slice(0, 6);
      const imageUrls = firstSixPacks.flatMap(pack => 
        pack.previewStickers.map(sticker => sticker.url)
      );
      
      if (imageUrls.length > 0) {
        preloadImages(imageUrls);
      }
    }
  }, [packs, setCachedData, preloadImages]);

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (hasNextPage && onLoadMore) {
      preloadNextPage(0, 1, async (page: number) => {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log(`üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page + 1}...`);
        return [];
      });
    }
  }, [hasNextPage, onLoadMore, preloadNextPage]);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ
  useEffect(() => {
    const stats = getStats();
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:', {
      hitRate: stats.hitRate,
      memoryUsage: stats.memoryUsage,
      cacheSize: cacheSize
    });
  }, [cacheSize, getStats]);



  // Infinite scroll –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const sentinelRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const sentinel = sentinelRef.current;
    if (!sentinel || !hasNextPage || isLoadingMore) return;

    const observer = new IntersectionObserver(
      (entries) => {
        const [entry] = entries;
        if (entry.isIntersecting && hasNextPage && !isLoadingMore && onLoadMore) {
          onLoadMore();
        }
      },
      {
        rootMargin: '100px',
        threshold: 0.1
      }
    );

    observer.observe(sentinel);

    return () => {
      observer.disconnect();
    };
  }, [hasNextPage, isLoadingMore, onLoadMore]);

  // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
  const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;
    const isNearBottom = scrollTop + clientHeight >= scrollHeight - 100;
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
    if (!hasNextPage && isNearBottom && visibleCount < packs.length) {
      setVisibleCount(prev => Math.min(prev + batchSize, packs.length));
    }
  }, [visibleCount, packs.length, batchSize, hasNextPage]);

  // –í–∏–¥–∏–º—ã–µ –ø–∞–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—è
  const visiblePacks = useMemo(() => 
    hasNextPage ? packs : packs.slice(0, visibleCount), 
    [packs, visibleCount, hasNextPage]
  );

  // Intersection Observer –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤ viewport
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const itemId = entry.target.getAttribute('data-item-id');
            if (itemId) {
              setAnimatedItems(prev => new Set([...prev, itemId]));
            }
          }
        });
      },
      {
        rootMargin: '50px', // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞ 50px –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
        threshold: 0.1
      }
    );

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    const cards = document.querySelectorAll('[data-item-id]');
    cards.forEach(card => observer.observe(card));

    return () => observer.disconnect();
  }, [visiblePacks]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
  const handlePackClick = useCallback((packId: string) => {
    if (onPackClick) {
      onPackClick(packId);
    }
  }, [onPackClick]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–∞–π–∫–∞
  const handleLikeAnimation = useCallback((packId: string) => {
    setLikeAnimations(prev => new Map(prev.set(packId, true)));
    
    // –°–±—Ä–æ—Å –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 600ms
    setTimeout(() => {
      setLikeAnimations(prev => {
        const newMap = new Map(prev);
        newMap.delete(packId);
        return newMap;
      });
    }, 600);
  }, []);

  // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é
  if (shouldUseVirtualization) {
    return (
      <div style={{ width: '100%', height: '80vh' }}>
        
        <VirtualizedGallery
          packs={packs}
          onPackClick={onPackClick}
          itemHeight={200}
          containerHeight={600}
          overscan={5}
        />
      </div>
    );
  }

  return (
    <div
      onScroll={handleScroll}
      style={{
        width: '100%',
        maxHeight: '80vh',
        overflow: 'auto'
      }}
    >


      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))',
        gap: '8px',
        padding: '8px'
      }}>
        {/* Skeleton Loading */}
        {showSkeleton && (
          <>
            {Array.from({ length: 6 }).map((_, index) => (
              <div
                key={`skeleton-${index}`}
                style={{
                  height: '200px',
                  width: '100%',
                  borderRadius: '12px',
                  background: 'linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)',
                  backgroundSize: '200% 100%',
                  animation: 'shimmer 1.5s infinite',
                  position: 'relative',
                  overflow: 'hidden'
                }}
              >
                {/* –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
                <div style={{
                  position: 'absolute',
                  top: '50%',
                  left: '50%',
                  transform: 'translate(-50%, -50%)',
                  width: '60px',
                  height: '60px',
                  backgroundColor: 'rgba(255, 255, 255, 0.3)',
                  borderRadius: '50%',
                  animation: 'pulse 2s infinite'
                }} />
                
                {/* –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
                <div style={{
                  position: 'absolute',
                  bottom: '12px',
                  left: '8px',
                  right: '8px',
                  height: '16px',
                  backgroundColor: 'rgba(255, 255, 255, 0.3)',
                  borderRadius: '8px',
                  animation: 'pulse 2s infinite'
                }} />
              </div>
            ))}
          </>
        )}

        {/* –†–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
        {!showSkeleton && visiblePacks.map((pack, index) => {
          const isAnimated = animatedItems.has(pack.id);
          const isFirstLoad = index < 6; // –ü–µ—Ä–≤—ã–µ 6 –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–Ω–∏–º–∏—Ä—É—é—Ç—Å—è —Å—Ä–∞–∑—É
          const isLikeAnimating = likeAnimations.has(pack.id);
          
          return (
            <div
              key={pack.id}
              data-item-id={pack.id}
              style={{
                opacity: isAnimated || isFirstLoad ? 1 : 0,
                transform: isAnimated || isFirstLoad 
                  ? 'translateY(0) scale(1)' 
                  : 'translateY(30px) scale(0.9)',
                transition: 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)',
                willChange: 'opacity, transform',
                position: 'relative'
              }}
            >
              {/* –ê–Ω–∏–º–∞—Ü–∏—è –ª–∞–π–∫–∞ */}
              {isLikeAnimating && (
                <div
                  style={{
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    transform: 'translate(-50%, -50%)',
                    zIndex: 10,
                    pointerEvents: 'none'
                  }}
                >
                  {/* –ü—É–ª—å—Å–∞—Ü–∏—è */}
                  <div
                    style={{
                      width: '100px',
                      height: '100px',
                      borderRadius: '50%',
                      background: 'radial-gradient(circle, rgba(255, 0, 0, 0.3) 0%, transparent 70%)',
                      animation: 'likePulse 0.6s ease-out',
                      position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: 'translate(-50%, -50%)'
                    }}
                  />
                  
                  {/* –ß–∞—Å—Ç–∏—Ü—ã */}
                  {Array.from({ length: 8 }).map((_, i) => (
                    <div
                      key={i}
                      style={{
                        position: 'absolute',
                        top: '50%',
                        left: '50%',
                        width: '6px',
                        height: '6px',
                        backgroundColor: '#ff6b6b',
                        borderRadius: '50%',
                        animation: `particle-${i} 0.6s ease-out forwards`,
                        animationDelay: `${i * 50}ms`
                      }}
                    />
                  ))}
                  
                  {/* –°–µ—Ä–¥–µ—á–∫–æ */}
                  <div
                    style={{
                      position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: 'translate(-50%, -50%)',
                      fontSize: '24px',
                      animation: 'likeHeart 0.6s ease-out'
                    }}
                  >
                    ‚ù§Ô∏è
                  </div>
                </div>
              )}
              
          <PackCard
            pack={pack}
            isFirstRow={index < 2}
            isHighPriority={index < 6}
            onClick={handlePackClick}
                onLikeAnimation={handleLikeAnimation}
          />
            </div>
          );
        })}
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {!hasNextPage && visibleCount < packs.length && (
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          padding: '20px',
          color: 'var(--tg-theme-hint-color)'
        }}>
          –ó–∞–≥—Ä—É–∂–µ–Ω–æ {visibleCount} –∏–∑ {packs.length} –ø–∞–∫–æ–≤
        </div>
      )}

      {/* –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      {hasNextPage && (
        <div
          ref={sentinelRef}
          style={{
            height: '20px',
            width: '100%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            padding: '20px 0'
          }}
        >
          {isLoadingMore && (
            <div style={{
              color: 'var(--tg-theme-hint-color)',
              fontSize: '14px',
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              <div style={{
                width: '16px',
                height: '16px',
                border: '2px solid var(--tg-theme-hint-color)',
                borderTop: '2px solid transparent',
                borderRadius: '50%',
                animation: 'spin 1s linear infinite'
              }} />
              –ó–∞–≥—Ä—É–∑–∫–∞...
            </div>
          )}
        </div>
      )}
    </div>
  );
};

// CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è skeleton loading –∏ –ø–ª–∞–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
const skeletonStyles = `
@keyframes shimmer {
  0% { background-position: -200% 0; }
  100% { background-position: 200% 0; }
}

@keyframes pulse {
  0%, 100% { opacity: 0.3; }
  50% { opacity: 0.6; }
}

@keyframes fadeInUp {
  0% {
    opacity: 0;
    transform: translateY(30px) scale(0.9);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

/* –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ª–∞–π–∫–æ–≤ */
@keyframes likePulse {
  0% {
    transform: translate(-50%, -50%) scale(0);
    opacity: 1;
  }
  100% {
    transform: translate(-50%, -50%) scale(2);
    opacity: 0;
  }
}

@keyframes likeHeart {
  0% {
    transform: translate(-50%, -50%) scale(0) rotate(0deg);
    opacity: 1;
  }
  50% {
    transform: translate(-50%, -50%) scale(1.2) rotate(10deg);
    opacity: 1;
  }
  100% {
    transform: translate(-50%, -50%) scale(1) rotate(0deg);
    opacity: 0;
  }
}

/* –ê–Ω–∏–º–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü */
@keyframes particle-0 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  100% { transform: translate(-30px, -30px) scale(0); opacity: 0; }
}

@keyframes particle-1 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  100% { transform: translate(30px, -30px) scale(0); opacity: 0; }
}

@keyframes particle-2 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  100% { transform: translate(-30px, 30px) scale(0); opacity: 0; }
}

@keyframes particle-3 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  100% { transform: translate(30px, 30px) scale(0); opacity: 0; }
}

@keyframes particle-4 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  100% { transform: translate(0, -40px) scale(0); opacity: 0; }
}

@keyframes particle-5 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  100% { transform: translate(0, 40px) scale(0); opacity: 0; }
}

@keyframes particle-6 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  100% { transform: translate(-40px, 0) scale(0); opacity: 0; }
}

@keyframes particle-7 {
  0% { transform: translate(0, 0) scale(1); opacity: 1; }
  100% { transform: translate(40px, 0) scale(0); opacity: 0; }
}

/* –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */
[data-item-id] {
  backface-visibility: hidden;
  perspective: 1000px;
  transform-style: preserve-3d;
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head
if (typeof document !== 'undefined') {
  const style = document.createElement('style');
  style.textContent = skeletonStyles;
  document.head.appendChild(style);
}
