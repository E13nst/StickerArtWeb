import React, { useState } from 'react';
import { 
  Card, 
  Typography, 
  Box, 
  Accordion, 
  AccordionSummary, 
  AccordionDetails,
  useTheme,
  useMediaQuery
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { TelegramUser } from '@/types/telegram';

interface DebugPanelProps {
  user: TelegramUser | null;
  initData: string;
  manualInitData?: string;
  platform?: string;
  version?: string;
  initDataValid: boolean;
  initDataError?: string;
}

export const DebugPanel: React.FC<DebugPanelProps> = ({
  user,
  initData,
  manualInitData,
  platform,
  version,
  initDataValid,
  initDataError
}) => {
  const theme = useTheme();
  const isSmallScreen = useMediaQuery(theme.breakpoints.down('md')); // < 700px —Å–≤–µ—Ä–Ω—É—Ç–∞
  
  const [expanded, setExpanded] = useState(!isSmallScreen); // –†–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö

  const now = new Date();
  const authDate = initData ? new URLSearchParams(initData).get('auth_date') : null;
  const authDateTime = authDate ? new Date(parseInt(authDate) * 1000) : null;
  const signature = initData ? new URLSearchParams(initData).get('signature') : null;
  const hash = initData ? new URLSearchParams(initData).get('hash') : null;
  const queryId = initData ? new URLSearchParams(initData).get('query_id') : null;

  const debugItems = [
    {
      label: 'üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è',
      value: now.toLocaleString()
    },
    {
      label: 'üì± Telegram Platform',
      value: platform || 'unknown'
    },
    {
      label: 'üìã Telegram Version',
      value: version || 'unknown'
    },
    {
      label: 'üîê InitData –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      value: initData ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'
    },
    {
      label: 'üìè InitData –¥–ª–∏–Ω–∞',
      value: initData ? `${initData.length} —Å–∏–º–≤–æ–ª–æ–≤` : 'N/A'
    },
    {
      label: 'üïí Auth Date',
      value: authDateTime ? authDateTime.toLocaleString() : '–Ω–µ –Ω–∞–π–¥–µ–Ω'
    },
    {
      label: '‚è∞ –í–æ–∑—Ä–∞—Å—Ç InitData',
      value: authDate ? `${Math.floor((now.getTime() - authDateTime!.getTime()) / 1000)} —Å–µ–∫—É–Ω–¥` : 'N/A'
    },
    {
      label: '‚úçÔ∏è Signature',
      value: signature ? `‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (${signature.length} —Å–∏–º–≤–æ–ª–æ–≤)` : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    },
    {
      label: '#Ô∏è‚É£ Hash',
      value: hash ? `‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (${hash.length} —Å–∏–º–≤–æ–ª–æ–≤)` : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    },
    {
      label: 'üÜî Query ID',
      value: queryId || '–Ω–µ –Ω–∞–π–¥–µ–Ω'
    },
    {
      label: 'üë§ User ID',
      value: user?.id || '–Ω–µ –Ω–∞–π–¥–µ–Ω'
    },
    {
      label: 'üåê API Endpoint',
      value: `${window.location.origin}/auth/status`
    },
    {
      label: '‚úÖ InitData –≤–∞–ª–∏–¥–∞—Ü–∏—è',
      value: initDataValid ? '‚úÖ –í–∞–ª–∏–¥–Ω–∞' : `‚ùå ${initDataError}`
    }
  ];

  return (
    <Card sx={{ mb: 2 }}>
      <Accordion 
        expanded={expanded} 
        onChange={() => setExpanded(!expanded)}
        sx={{ boxShadow: 'none' }}
      >
        <AccordionSummary 
          expandIcon={<ExpandMoreIcon />}
          sx={{ 
            backgroundColor: 'rgba(33, 150, 243, 0.1)',
            border: '1px solid rgba(33, 150, 243, 0.3)',
            borderRadius: 1
          }}
        >
          <Typography variant="subtitle2" color="primary" fontWeight="bold">
            üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (initData)
          </Typography>
        </AccordionSummary>
        <AccordionDetails>
          <Box sx={{ mt: 1 }}>
            {debugItems.map((item, index) => (
              <Box 
                key={index}
                sx={{ 
                  mb: 1, 
                  p: 1, 
                  borderLeft: '3px solid #2196F3',
                  backgroundColor: 'rgba(33, 150, 243, 0.05)',
                  borderRadius: '0 4px 4px 0'
                }}
              >
                <Typography variant="body2" component="span" fontWeight="bold" color="primary">
                  {item.label}:
                </Typography>
                <Typography variant="body2" component="span" sx={{ ml: 1 }}>
                  {item.value}
                </Typography>
              </Box>
            ))}
            
            <Box sx={{ mt: 2 }}>
              <Typography variant="body2" fontWeight="bold" color="primary" gutterBottom>
                üî§ InitData –æ—Ç Telegram Web App:
              </Typography>
              <Box
                sx={{
                  p: 1,
                  backgroundColor: 'rgba(0, 0, 0, 0.1)',
                  borderRadius: 1,
                  fontFamily: 'monospace',
                  fontSize: '0.75rem',
                  wordBreak: 'break-all',
                  whiteSpace: 'pre-wrap'
                }}
              >
                {initData || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
              </Box>
            </Box>
            
            {manualInitData && (
              <Box sx={{ mt: 2 }}>
                <Typography variant="body2" fontWeight="bold" color="primary" gutterBottom>
                  üî§ InitData –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
                </Typography>
                <Box
                  sx={{
                    p: 1,
                    backgroundColor: 'rgba(0, 0, 0, 0.1)',
                    borderRadius: 1,
                    fontFamily: 'monospace',
                    fontSize: '0.75rem',
                    wordBreak: 'break-all',
                    whiteSpace: 'pre-wrap'
                  }}
                >
                  {manualInitData}
                </Box>
              </Box>
            )}
          </Box>
        </AccordionDetails>
      </Accordion>
    </Card>
  );
};
