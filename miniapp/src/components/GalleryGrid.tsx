import React, { useEffect, useRef, useState, useCallback, useMemo } from 'react';
import { PackCard } from './PackCard';
import { useGalleryStore, getSessionSeed, setSessionSeed } from '../store/useGalleryStore';
import { useZoneLoading } from '../hooks/useZoneLoading';
import { seededShuffle } from '../utils/galleryUtils';

interface Pack {
  id: string;
  title: string;
  posters: Array<{ fileId: string; url: string }>;
}

interface GalleryGridProps {
  packs: Pack[];
  onPackClick?: (packId: string) => void;
}

export const GalleryGrid: React.FC<GalleryGridProps> = ({ 
  packs, 
  onPackClick
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const [isInitialized, setIsInitialized] = useState(false);
  const prevPackIdsRef = useRef<string>('');
  
  const {
    seed,
    shuffledPackIds,
    scrollY,
    setSeed,
    setShuffledPackIds,
    setScrollY
  } = useGalleryStore();

  // –ó–æ–Ω–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–æ–π
  const { observeElement, unobserveElement, cleanup, getZoneStats } = useZoneLoading({
    containerRef,
    onZoneChange: (zone) => {
      console.log(`üéØ Zone changed to: ${zone}`);
    },
    onPriorityChange: (packId, priority) => {
      console.log(`‚ö° Priority updated for pack ${packId}: ${priority}`);
    }
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    if (isInitialized || packs.length === 0) return;

    // –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å seed
    let currentSeed = seed;
    if (!currentSeed) {
      const sessionSeed = getSessionSeed();
      if (sessionSeed) {
        currentSeed = sessionSeed;
        setSeed(currentSeed);
      } else {
        currentSeed = Math.random().toString(36).substring(2);
        setSeed(currentSeed);
        setSessionSeed(currentSeed);
      }
    }

    // –ü–µ—Ä–µ–º–µ—à–∞—Ç—å packs –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
    if (shuffledPackIds.length === 0) {
      const packIds = packs.map(p => p.id);
      const shuffled = seededShuffle(currentSeed, packIds);
      setShuffledPackIds(shuffled);
    }

    setIsInitialized(true);
  }, [packs, seed, shuffledPackIds.length, setSeed, setShuffledPackIds, isInitialized]);

  // –°–±—Ä–æ—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ packs (–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
  useEffect(() => {
    if (packs.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ
      const currentPackIds = packs.map(p => p.id).sort().join(',');
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      if (currentPackIds !== prevPackIdsRef.current) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ ID
        prevPackIdsRef.current = currentPackIds;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π seed –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const newSeed = Math.random().toString(36).substring(2);
        setSeed(newSeed);
        setSessionSeed(newSeed);
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
        const packIds = packs.map(p => p.id);
        const shuffled = seededShuffle(newSeed, packIds);
        setShuffledPackIds(shuffled);
      }
    }
  }, [packs, setSeed, setShuffledPackIds]);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
  useEffect(() => {
    if (isInitialized && containerRef.current && scrollY > 0) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      setTimeout(() => {
        if (containerRef.current) {
          containerRef.current.scrollTop = scrollY;
        }
      }, 100);
    }
  }, [isInitialized, scrollY]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const handleBeforeUnload = () => {
      if (containerRef.current) {
        setScrollY(containerRef.current.scrollTop);
      }
    };

    const handleScroll = () => {
      if (containerRef.current) {
        setScrollY(containerRef.current.scrollTop);
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    const container = containerRef.current;
    if (container) {
      container.addEventListener('scroll', handleScroll);
    }

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      if (container) {
        container.removeEventListener('scroll', handleScroll);
      }
      cleanup(); // –û—á–∏—Å—Ç–∫–∞ –∑–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    };
  }, [setScrollY, cleanup]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –ø–∞–∫
  const handlePackClick = useCallback((packId: string) => {
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
    if (containerRef.current) {
      setScrollY(containerRef.current.scrollTop);
    }
    
    if (onPackClick) {
      onPackClick(packId);
    }
  }, [onPackClick, setScrollY]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ref –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const createRefCallback = useCallback((packId: string) => {
    return (el: HTMLDivElement | null) => {
      if (el) {
        observeElement(el, packId);
      }
    };
  }, [observeElement]);

  if (!isInitialized || shuffledPackIds.length === 0) {
    return (
      <div style={{ 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        color: 'var(--tg-theme-hint-color)',
        padding: '40px 0'
      }}>
        –ó–∞–≥—Ä—É–∑–∫–∞...
      </div>
    );
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ packs
  const sortedPacks = shuffledPackIds
    .map(id => packs.find(p => p.id === id))
    .filter(Boolean) as Pack[];

  return (
    <div 
      ref={containerRef}
      data-testid="gallery-grid"
      style={{ 
        width: '100%'
      }}
    >
      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))',
        gap: '8px',
        padding: '8px'
      }}>
        {sortedPacks.map((pack, index) => {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 6 –ø–∞–∫–æ–≤
          const isHighPriority = index < 6;
          
          return (
            <div
              key={pack.id}
              ref={createRefCallback(pack.id)}
              style={{ width: '100%' }}
            >
              <PackCard
                pack={pack}
                isFirstRow={index < 2}
                isHighPriority={isHighPriority}
                onClick={handlePackClick}
              />
            </div>
          );
        })}
      </div>
    </div>
  );
};
