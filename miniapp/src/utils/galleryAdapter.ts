import { StickerSetResponse } from '../types/sticker';
import { getStickerThumbnailUrl, getRandomStickersFromSet } from './stickerUtils';

export interface GalleryPack {
  id: string;
  title: string;
  posters: Array<{ 
    fileId: string; 
    url: string; 
    isAnimated?: boolean;
    emoji?: string;
  }>;
  allStickers?: Array<{ 
    fileId: string; 
    url: string; 
    isAnimated?: boolean;
    emoji?: string;
  }>;
}

export function adaptStickerSetsToGalleryPacks(stickerSets: StickerSetResponse[]): GalleryPack[] {
  const result = stickerSets.map(stickerSet => {
    const allStickers = stickerSet.telegramStickerSetInfo?.stickers || [];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –∫–∞–∫ seed –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    const seed = stickerSet.id.toString();
    const randomStickers = getRandomStickersFromSet(allStickers, 4, seed);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏
    const allStickersForEmoji = allStickers
      .filter(sticker => sticker && sticker.file_id)
      .map(sticker => ({
        fileId: sticker.file_id,
        url: getStickerThumbnailUrl(sticker.file_id),
        isAnimated: sticker.is_animated,
        emoji: sticker.emoji || 'üé®'
      }));
    
    return {
      id: stickerSet.id.toString(),
      title: stickerSet.title,
      posters: randomStickers
        .filter(sticker => sticker && sticker.file_id) // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
        .map(sticker => ({
          fileId: sticker.file_id,
          url: getStickerThumbnailUrl(sticker.file_id),
          isAnimated: sticker.is_animated,
          emoji: sticker.emoji || 'üé®' // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –Ω–µ—Ç
        })),
      allStickers: allStickersForEmoji // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏
    };
  });
  
  return result;
}
