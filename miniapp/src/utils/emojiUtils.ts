// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ–¥–∑–∏ –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤

export interface EmojiInfo {
  emoji: string;
  count: number;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
 */
export function getUniqueEmojisFromPack(posters: Array<{ emoji?: string }>): string[] {
  const emojis = posters
    .map(poster => poster.emoji)
    .filter((emoji): emoji is string => Boolean(emoji) && emoji.trim() !== '') // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏ null —ç–º–æ–¥–∑–∏
    .filter((emoji, index, array) => array.indexOf(emoji) === index); // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  
  return emojis;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–æ–¥–∑–∏ –≤ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ
 */
export function getEmojiStats(posters: Array<{ emoji?: string }>): EmojiInfo[] {
  const emojiCount: Record<string, number> = {};
  
  posters.forEach(poster => {
    if (poster.emoji) {
      emojiCount[poster.emoji] = (emojiCount[poster.emoji] || 0) + 1;
    }
  });
  
  return Object.entries(emojiCount)
    .map(([emoji, count]) => ({ emoji, count }))
    .sort((a, b) => b.count - a.count); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
 */
export function getRandomEmojisFromPack(
  posters: Array<{ emoji?: string }>, 
  count: number = 3,
  seed?: string
): string[] {
  const uniqueEmojis = getUniqueEmojisFromPack(posters);
  
  if (uniqueEmojis.length === 0) return [];
  
  // –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ
  if (uniqueEmojis.length <= count) {
    return uniqueEmojis;
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º seed –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  let randomSeed = 0;
  if (seed) {
    for (let i = 0; i < seed.length; i++) {
      randomSeed += seed.charCodeAt(i);
    }
  }
  
  // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ seed
  const selectedEmojis: string[] = [];
  const availableEmojis = [...uniqueEmojis];
  
  for (let i = 0; i < count && availableEmojis.length > 0; i++) {
    const randomIndex = (randomSeed + i * 7) % availableEmojis.length;
    selectedEmojis.push(availableEmojis[randomIndex]);
    availableEmojis.splice(randomIndex, 1);
  }
  
  return selectedEmojis;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ (–±–µ–∑ seed)
 */
export function getTrulyRandomEmojisFromPack(
  posters: Array<{ emoji?: string }>, 
  count: number = 3
): string[] {
  const uniqueEmojis = getUniqueEmojisFromPack(posters);
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —ç–º–æ–¥–∑–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
  if (uniqueEmojis.length === 0) {
    return ['üé®', '‚ú®', 'üé≠'].slice(0, count);
  }
  
  // –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ
  if (uniqueEmojis.length <= count) {
    return uniqueEmojis;
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Fisher-Yates shuffle –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  const shuffledEmojis = [...uniqueEmojis];
  for (let i = shuffledEmojis.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffledEmojis[i], shuffledEmojis[j]] = [shuffledEmojis[j], shuffledEmojis[i]];
  }
  
  return shuffledEmojis.slice(0, count);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏–∑ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
 */
export function getTopEmojisFromPack(
  posters: Array<{ emoji?: string }>, 
  count: number = 3
): string[] {
  const emojiStats = getEmojiStats(posters);
  return emojiStats
    .slice(0, count)
    .map(stat => stat.emoji);
}
