import { useEffect, useState } from 'react';
import { TelegramWebApp, TelegramUser } from '@/types/telegram';
import { logger } from '@/utils/logger';

export const useTelegram = () => {
  const [tg, setTg] = useState<TelegramWebApp | null>(null);
  const [user, setUser] = useState<TelegramUser | null>(null);
  const [initData, setInitData] = useState<string>('');
  const [isReady, setIsReady] = useState(false);

  useEffect(() => {
    const telegram = window.Telegram?.WebApp;
    
    if (telegram) {
      setTg(telegram);
      setUser(telegram.initDataUnsafe?.user || null);
      setInitData(telegram.initData || '');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
      telegram.ready();
      telegram.expand();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
      if (telegram.themeParams) {
        const root = document.documentElement;
        root.style.setProperty('--tg-theme-bg-color', telegram.themeParams.bg_color || '#ffffff');
        root.style.setProperty('--tg-theme-text-color', telegram.themeParams.text_color || '#000000');
        root.style.setProperty('--tg-theme-hint-color', telegram.themeParams.hint_color || '#999999');
        root.style.setProperty('--tg-theme-button-color', telegram.themeParams.button_color || '#2481cc');
        root.style.setProperty('--tg-theme-button-text-color', telegram.themeParams.button_text_color || '#ffffff');
        root.style.setProperty('--tg-theme-secondary-bg-color', telegram.themeParams.secondary_bg_color || '#f8f9fa');
      }
      
      setIsReady(true);
      
      logger.log('üîç Telegram Web App –¥–∞–Ω–Ω—ã–µ:');
      logger.log('tg.initData:', telegram.initData ? `present (${telegram.initData.length} chars)` : 'null');
      logger.log('tg.initDataUnsafe:', telegram.initDataUnsafe);
      logger.log('user:', telegram.initDataUnsafe?.user);
      logger.log('platform:', telegram.platform);
      logger.log('version:', telegram.version);
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ initData
      if (telegram.initData) {
        logger.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä initData:');
        const params = new URLSearchParams(telegram.initData);
        for (const [key, value] of params.entries()) {
          logger.log(`  ${key}:`, value);
        }
      }
    } else {
      logger.warn('‚ö†Ô∏è Telegram Web App –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
      setIsReady(true);
    }
  }, []);

  const checkInitDataExpiry = (initDataString: string) => {
    if (!initDataString) return { valid: false, reason: 'initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' };
    
    try {
      const params = new URLSearchParams(initDataString);
      const authDate = parseInt(params.get('auth_date') || '0');
      
      if (!authDate) {
        return { valid: false, reason: 'auth_date –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' };
      }
      
      const now = Math.floor(Date.now() / 1000);
      const age = now - authDate;
      const maxAge = 600; // 10 –º–∏–Ω—É—Ç
      
      logger.log('üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è initData:');
      logger.log('auth_date:', authDate, `(${new Date(authDate * 1000).toLocaleString()})`);
      logger.log('current time:', now, `(${new Date(now * 1000).toLocaleString()})`);
      logger.log('age:', age, '—Å–µ–∫—É–Ω–¥');
      logger.log('max age:', maxAge, '—Å–µ–∫—É–Ω–¥');
      
      if (age > maxAge) {
        return { 
          valid: false, 
          reason: `initData —É—Å—Ç–∞—Ä–µ–ª (–≤–æ–∑—Ä–∞—Å—Ç: ${age} —Å–µ–∫, –º–∞–∫—Å–∏–º—É–º: ${maxAge} —Å–µ–∫)`,
          age: age,
          maxAge: maxAge
        };
      }
      
      return { valid: true, age: age, maxAge: maxAge };
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è initData:', error);
      return { valid: false, reason: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData: ${error}` };
    }
  };

  const refreshInitData = () => {
    if (!tg) return false;
    
    logger.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è initData...');
    
    const newUser = tg.initDataUnsafe?.user;
    const newInitData = tg.initData;
    
    if (newInitData && newInitData !== initData) {
      logger.log('‚úÖ initData –æ–±–Ω–æ–≤–ª–µ–Ω');
      setUser(newUser || null);
      setInitData(newInitData);
      return true;
    } else {
      logger.log('‚ùå initData –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
      return false;
    }
  };

  const isInTelegramApp = Boolean(tg && initData && initData.trim() !== '');

  return {
    tg,
    user,
    initData,
    isReady,
    isInTelegramApp,
    checkInitDataExpiry,
    refreshInitData
  };
};
