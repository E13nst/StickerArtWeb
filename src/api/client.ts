import axios, { AxiosInstance } from 'axios';
import { StickerSetListResponse, StickerSetResponse, AuthResponse } from '@/types/sticker';
import { UserInfo } from '@/store/useProfileStore';
import { mockStickerSets, mockAuthResponse } from '@/data/mockData';

class ApiClient {
  private client: AxiosInstance;

  constructor() {
    this.client = axios.create({
      baseURL: '/api',
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º interceptor –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.client.interceptors.request.use(
      (config) => {
        console.log('üåê API –∑–∞–ø—Ä–æ—Å:', config.method?.toUpperCase(), config.url);
        return config;
      },
      (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
        return Promise.reject(error);
      }
    );

    this.client.interceptors.response.use(
      (response) => {
        console.log('‚úÖ API –æ—Ç–≤–µ—Ç:', response.status, response.config.url);
        return response;
      },
      (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', error.response?.status, error.response?.data);
        return Promise.reject(error);
      }
    );
  }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      setAuthHeaders(initData: string, botName: string = 'StickerGallery') {
        this.client.defaults.headers.common['X-Telegram-Init-Data'] = initData;
        this.client.defaults.headers.common['X-Telegram-Bot-Name'] = botName;
        console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:');
        console.log('  X-Telegram-Init-Data:', initData ? `${initData.length} chars` : 'empty');
        console.log('  X-Telegram-Bot-Name:', botName);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç Chrome —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π (ModHeader –∏ —Ç.–ø.)
      checkExtensionHeaders() {
        // ModHeader –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ fetch requests
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        const extensionInitData = this.client.defaults.headers.common['X-Telegram-Init-Data-Extension'];
        const extensionBotName = this.client.defaults.headers.common['X-Telegram-Bot-Name-Extension'];
        
        if (extensionInitData) {
          console.log('üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç Chrome —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:');
          console.log('  X-Telegram-Init-Data-Extension:', extensionInitData);
          console.log('  X-Telegram-Bot-Name-Extension:', extensionBotName);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
          this.client.defaults.headers.common['X-Telegram-Init-Data'] = extensionInitData;
          this.client.defaults.headers.common['X-Telegram-Bot-Name'] = extensionBotName || 'StickerGallery';
          
          return true;
        }
        
        return false;
      }

  // –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  clearAuthHeaders() {
    delete this.client.defaults.headers.common['X-Telegram-Init-Data'];
    delete this.client.defaults.headers.common['X-Telegram-Bot-Name'];
    console.log('üßπ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async getStickerSets(page: number = 0, size: number = 20): Promise<StickerSetListResponse> {
    try {
      const response = await this.client.get<StickerSetListResponse>('/stickersets', {
        params: { page, size }
      });
      return response.data;
    } catch (error) {
      console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      return {
        content: mockStickerSets,
        totalElements: mockStickerSets.length,
        totalPages: 1,
        size: mockStickerSets.length,
        number: 0,
        first: true,
        last: true,
        numberOfElements: mockStickerSets.length
      };
    }
  }

  // –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  async searchStickerSets(query: string, page: number = 0, size: number = 20): Promise<StickerSetListResponse> {
    try {
      const response = await this.client.get<StickerSetListResponse>('/stickersets/search', {
        params: { name: query, page, size }
      });
      return response.data;
    } catch (error) {
      console.warn('‚ö†Ô∏è API –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö');
      // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
      const filteredMockData = mockStickerSets.filter(stickerSet =>
        stickerSet.title.toLowerCase().includes(query.toLowerCase()) ||
        stickerSet.name.toLowerCase().includes(query.toLowerCase())
      );
      
      return {
        content: filteredMockData,
        totalElements: filteredMockData.length,
        totalPages: 1,
        size: filteredMockData.length,
        number: 0,
        first: true,
        last: true,
        numberOfElements: filteredMockData.length
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞ –ø–æ ID
  async getStickerSet(id: number): Promise<StickerSetResponse> {
    const response = await this.client.get<StickerSetResponse>(`/stickersets/${id}`);
    return response.data;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
  async deleteStickerSet(id: number): Promise<void> {
    await this.client.delete(`/stickersets/${id}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async checkAuthStatus(): Promise<AuthResponse> {
    try {
      const response = await this.client.get<AuthResponse>('/auth/status');
      return response.data;
    } catch (error) {
      console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      return mockAuthResponse;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –ø–æ file_id
  async getSticker(fileId: string): Promise<Blob> {
    const response = await this.client.get(`/stickers/${fileId}`, {
      responseType: 'blob'
    });
    return response.data;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞
  getStickerUrl(fileId: string): string {
    return `/api/stickers/${fileId}`;
  }

  // ============ –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ============

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID
  async getUserInfo(userId: number): Promise<UserInfo> {
    try {
      const response = await this.client.get<UserInfo>(`/users/${userId}`);
      return response.data;
    } catch (error) {
      console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return {
        id: 1,
        telegramId: userId,
        username: 'mockuser',
        firstName: 'Mock',
        lastName: 'User',
        avatarUrl: 'https://via.placeholder.com/64x64/2481cc/ffffff?text=MU',
        role: 'USER',
        artBalance: 150,
        createdAt: '2025-09-15T10:30:00Z'
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
  async getUserStickerSets(userId: number, page: number = 0, size: number = 20): Promise<StickerSetListResponse> {
    try {
      const response = await this.client.get<StickerSetListResponse>(`/stickersets/user/${userId}`, {
        params: { page, size }
      });
      return response.data;
    } catch (error) {
      console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –ø–æ userId (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
             const userMockSets = mockStickerSets.filter(set => (set as any).userId === userId || userId === 123456789);
      
      return {
        content: userMockSets,
        totalElements: userMockSets.length,
        totalPages: Math.ceil(userMockSets.length / size),
        size: size,
        number: page,
        first: page === 0,
        last: page >= Math.ceil(userMockSets.length / size) - 1,
        numberOfElements: userMockSets.length
      };
    }
  }

  // –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  async searchUserStickerSets(userId: number, query: string, page: number = 0, size: number = 20): Promise<StickerSetListResponse> {
    try {
      const response = await this.client.get<StickerSetListResponse>(`/stickersets/user/${userId}/search`, {
        params: { name: query, page, size }
      });
      return response.data;
    } catch (error) {
      console.warn('‚ö†Ô∏è API –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é');
      // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö
       const userMockSets = mockStickerSets.filter(set => 
         ((set as any).userId === userId || userId === 123456789) &&
        (set.title.toLowerCase().includes(query.toLowerCase()) ||
         set.name.toLowerCase().includes(query.toLowerCase()))
      );
      
      return {
        content: userMockSets,
        totalElements: userMockSets.length,
        totalPages: Math.ceil(userMockSets.length / size),
        size: size,
        number: page,
        first: page === 0,
        last: page >= Math.ceil(userMockSets.length / size) - 1,
        numberOfElements: userMockSets.length
      };
    }
  }
}

export const apiClient = new ApiClient();
