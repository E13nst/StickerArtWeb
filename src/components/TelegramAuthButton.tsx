import React, { useState } from 'react';
import { Button, Box, Typography, Alert } from '@mui/material';
import TelegramIcon from '@mui/icons-material/Telegram';

interface TelegramAuthButtonProps {
  onAuthSuccess: (initData: string) => void;
  onAuthError: (error: string) => void;
}

export const TelegramAuthButton: React.FC<TelegramAuthButtonProps> = ({
  onAuthSuccess,
  onAuthError
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleTelegramAuth = () => {
    setIsLoading(true);
    setError(null);

    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
    const botUsername = 'StickerGallery'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –±–æ—Ç
    const redirectUrl = encodeURIComponent(window.location.origin + window.location.pathname);
    const telegramAuthUrl = `https://t.me/${botUsername}?startapp=${btoa(redirectUrl)}`;

    console.log('üîó Telegram Auth URL:', telegramAuthUrl);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    window.open(telegramAuthUrl, '_blank');

    // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram Web App
    const handleMessage = (event: MessageEvent) => {
      if (event.origin !== 'https://web.telegram.org') {
        return;
      }

      if (event.data.type === 'telegram-auth') {
        const { initData } = event.data;
        if (initData) {
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω initData –æ—Ç Telegram:', initData);
          onAuthSuccess(initData);
          window.removeEventListener('message', handleMessage);
        } else {
          console.error('‚ùå initData –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç Telegram');
          onAuthError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Telegram');
          window.removeEventListener('message', handleMessage);
        }
        setIsLoading(false);
      }
    };

    window.addEventListener('message', handleMessage);

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
      window.removeEventListener('message', handleMessage);
      setIsLoading(false);
      if (!error) {
        setError('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ');
      }
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥
  };

  return (
    <Box sx={{ textAlign: 'center', p: 3 }}>
      <Typography variant="h6" gutterBottom>
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
      </Typography>
      
      <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
        –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      <Button
        variant="contained"
        size="large"
        startIcon={<TelegramIcon />}
        onClick={handleTelegramAuth}
        disabled={isLoading}
        sx={{
          backgroundColor: '#0088cc',
          '&:hover': {
            backgroundColor: '#006699',
          },
        }}
      >
        {isLoading ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...' : '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram'}
      </Button>

      <Typography variant="caption" display="block" sx={{ mt: 2, color: 'text.secondary' }}>
        –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Telegram –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
      </Typography>
    </Box>
  );
};
