import React, { useMemo, useCallback } from 'react';
import { Box, Grid } from '@mui/material';
import { StickerSetResponse } from '@/types/sticker';
import { StickerCard } from './StickerCard';
import { HeroStickerCard } from './HeroStickerCard';

interface StickerSetListProps {
  stickerSets: StickerSetResponse[];
  onView: (id: number, name: string) => void;
  isInTelegramApp?: boolean;
}

export const StickerSetList: React.FC<StickerSetListProps> = ({
  stickerSets,
  onView,
  isInTelegramApp = false
}) => {
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const handleView = useCallback((id: number, name: string) => {
    onView(id, name);
  }, [onView]);

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const maxVisibleItems = 20; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ —Ä–∞–∑
  const visibleStickerSets = useMemo(() => {
    return stickerSets.slice(0, maxVisibleItems);
  }, [stickerSets]);

  console.log('üîç StickerSetList —Ä–µ–Ω–¥–µ—Ä:', {
    stickerSetsCount: stickerSets.length,
    visibleCount: visibleStickerSets.length,
    isInTelegramApp
  });

  return (
    <Box sx={{ 
      pb: isInTelegramApp ? 2 : 10, // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è Bottom Navigation
      px: isInTelegramApp ? 0 : 2,  // –ë–æ–∫–æ–≤—ã–µ –æ—Ç—Å—Ç—É–ø—ã –Ω–∞ desktop
    }}>
      <Grid container spacing={1.75} sx={{ alignItems: 'stretch' }}>
        {visibleStickerSets.map((stickerSet, index) => {
          console.log('üîç StickerSetList —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏:', {
            stickerSetId: stickerSet.id,
            stickerSetTitle: stickerSet.title,
            isInTelegramApp
          });
          
          // Hero –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–∞–∂–¥—É—é 6-—é (–µ—Å–ª–∏ –µ—Å—Ç—å ‚â• 4 –ø—Ä–µ–≤—å—é)
          const shouldShowHero = (index + 1) % 6 === 0 && stickerSet.stickers && stickerSet.stickers.length >= 4;
          
          return (
            <Grid item xs={6} key={stickerSet.id}>
              <Box 
                sx={{ 
                  height: '100%',
                  contentVisibility: 'auto',
                  containIntrinsicSize: '480px'
                }}
                className="content-visibility-auto"
              >
                {shouldShowHero ? (
                  <HeroStickerCard 
                    stickers={stickerSet.stickers.map(s => s.url).slice(0, 4)}
                    style={{ height: '100%' }}
                  />
                ) : (
                  <StickerCard
                    stickerSet={stickerSet}
                    onView={handleView}
                    isInTelegramApp={isInTelegramApp}
                  />
                )}
              </Box>
            </Grid>
          );
        })}
      </Grid>
      
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
      {stickerSets.length > maxVisibleItems && (
        <Box sx={{ 
          textAlign: 'center', 
          py: 2,
          color: 'text.secondary',
          fontSize: '0.9rem',
          width: '100%'
        }}>
          –ü–æ–∫–∞–∑–∞–Ω–æ {maxVisibleItems} –∏–∑ {stickerSets.length} –Ω–∞–±–æ—Ä–æ–≤
        </Box>
      )}
    </Box>
  );
};
