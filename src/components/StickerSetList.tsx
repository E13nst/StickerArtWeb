import React, { useMemo, useCallback, useEffect } from 'react';
import { Box, Grid, Button } from '@mui/material';
import { StickerSetResponse } from '@/types/sticker';
import { SinglePreviewCard } from './SinglePreviewCard';
import { useProgressiveLoading } from '@/hooks/useProgressiveLoading';
import { imageCache } from '@/utils/imageCache';

interface StickerSetListProps {
  stickerSets: StickerSetResponse[];
  onView: (id: number, name: string) => void;
  isInTelegramApp?: boolean;
}

export const StickerSetList: React.FC<StickerSetListProps> = ({
  stickerSets,
  onView,
  isInTelegramApp = false
}) => {
  // –ü–æ—ç—Ç–∞–ø–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: —Å–Ω–∞—á–∞–ª–∞ 4, –ø–æ—Ç–æ–º –ø–æ 2 (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫)
  const { visibleItems, isLoading, loadNextBatch, hasMore } = useProgressiveLoading(
    stickerSets.length,
    { initialBatch: 4, batchSize: 2 }
  );

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ-—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const handleView = useCallback((id: number, name: string) => {
    onView(id, name);
  }, [onView]);

  // –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∏–º—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏
  const visibleStickerSets = useMemo(() => {
    return stickerSets.slice(0, visibleItems);
  }, [stickerSets, visibleItems]);

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∏–¥–∏–º—ã—Ö —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤
  useEffect(() => {
    const imageUrls: string[] = [];
    
    visibleStickerSets.forEach(stickerSet => {
      const stickers = stickerSet.telegramStickerSetInfo?.stickers?.slice(0, 3) || [];
      stickers.forEach(sticker => {
        if (sticker.url) {
          imageUrls.push(sticker.url);
        } else {
          imageUrls.push(`/api/stickers/${sticker.file_id}`);
        }
      });
    });

    if (imageUrls.length > 0) {
      console.log('üöÄ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageUrls.length);
      imageCache.preloadImages(imageUrls);
    }
  }, [visibleStickerSets]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
  useEffect(() => {
    const handleScroll = () => {
      if (!hasMore || isLoading) return;

      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const windowHeight = window.innerHeight;
      const docHeight = document.documentElement.offsetHeight;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é –∫–æ–≥–¥–∞ –¥–æ—à–ª–∏ –¥–æ 80% —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (scrollTop + windowHeight >= docHeight * 0.8) {
        loadNextBatch();
      }
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, [hasMore, isLoading, loadNextBatch]);

  console.log('üîç StickerSetList —Ä–µ–Ω–¥–µ—Ä:', {
    stickerSetsCount: stickerSets.length,
    visibleCount: visibleStickerSets.length,
    hasMore,
    isLoading,
    isInTelegramApp,
    cacheStats: imageCache.getStats()
  });

  return (
    <Box sx={{ 
      pb: isInTelegramApp ? 2 : 10, // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è Bottom Navigation
      px: isInTelegramApp ? 0 : 2,  // –ë–æ–∫–æ–≤—ã–µ –æ—Ç—Å—Ç—É–ø—ã –Ω–∞ desktop
    }}>
      <Grid container spacing={1.75} sx={{ alignItems: 'stretch' }}>
        {visibleStickerSets.map((stickerSet, index) => {
          console.log('üîç StickerSetList —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏:', {
            stickerSetId: stickerSet.id,
            stickerSetTitle: stickerSet.title,
            isInTelegramApp
          });
          
          return (
            <Grid item xs={6} key={stickerSet.id}>
              <Box 
                sx={{ 
                  height: '100%',
                  contentVisibility: 'auto',
                  containIntrinsicSize: '300px'
                }}
                className="content-visibility-auto"
              >
                <SinglePreviewCard
                  stickerSet={stickerSet}
                  onView={handleView}
                  isInTelegramApp={isInTelegramApp}
                />
              </Box>
            </Grid>
          );
        })}
      </Grid>
      
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isLoading && (
        <Box sx={{ 
          textAlign: 'center', 
          py: 2,
          color: 'text.secondary',
          fontSize: '0.9rem',
          width: '100%'
        }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤...
        </Box>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –µ—â–µ */}
      {hasMore && !isLoading && (
        <Box sx={{ 
          textAlign: 'center', 
          py: 2,
          width: '100%'
        }}>
          <Button 
            variant="outlined" 
            onClick={loadNextBatch}
            sx={{ 
              borderRadius: 2,
              textTransform: 'none',
              px: 3,
              py: 1
            }}
          >
            –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ ({stickerSets.length - visibleItems} –æ—Å—Ç–∞–ª–æ—Å—å)
          </Button>
        </Box>
      )}

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ */}
      {!hasMore && stickerSets.length > 0 && (
        <Box sx={{ 
          textAlign: 'center', 
          py: 2,
          color: 'text.secondary',
          fontSize: '0.9rem',
          width: '100%'
        }}>
          –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ {stickerSets.length} —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤
        </Box>
      )}
    </Box>
  );
};
