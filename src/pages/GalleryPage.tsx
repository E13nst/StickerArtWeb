import React, { useEffect, useState, useRef } from 'react';
import { 
  Container, 
  Box,
} from '@mui/material';
import { useTelegram } from '@/hooks/useTelegram';
import { useStickerStore } from '@/store/useStickerStore';
import { apiClient } from '@/api/client';
import { StickerSetResponse } from '@/types/sticker';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { Header } from '@/components/Header';
import MinimalSearchBar from '@/components/MinimalSearchBar';
import { CategoriesFilter } from '@/components/CategoriesFilter';
import { StickerSetList } from '@/components/StickerSetList';
import { StickerSetDetail } from '@/components/StickerSetDetail';
import { LoadingSpinner } from '@/components/LoadingSpinner';
import { ErrorDisplay } from '@/components/ErrorDisplay';
import { EmptyState } from '@/components/EmptyState';
import { BottomNav } from '@/components/BottomNav';

// –•—É–∫–∏
import { useCategories } from '@/hooks/useCategories';
import { useScrollHue } from '@/hooks/useScrollHue';
import { useTgSafeArea } from '@/telegram/useTgSafeArea';

export const GalleryPage: React.FC = () => {
  // –•—É–∫ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –æ—Ç—Ç–µ–Ω–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
  useScrollHue(190, 255);  // –º—è–≥–∫–∞—è –≥–∞–º–º–∞: –≥–æ–ª—É–±–æ–π ‚Üí –ª–∞–∑—É—Ä–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
  
  // –•—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–æ–Ω Telegram
  useTgSafeArea();

  const { tg, user, initData, isReady, isInTelegramApp, checkInitDataExpiry } = useTelegram();
  const {
    isLoading,
    isAuthLoading,
    stickerSets,
    authStatus: _authStatus,
    error,
    authError: _authError,
    setLoading,
    setAuthLoading,
    setStickerSets,
    setAuthStatus,
    setError,
    setAuthError,
  } = useStickerStore();

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [searchTerm, setSearchTerm] = useState('');
  const [viewMode, setViewMode] = useState<'list' | 'detail'>('list');
  const [selectedStickerSet, setSelectedStickerSet] = useState<StickerSetResponse | null>(null);
  const [manualInitData, setManualInitData] = useState<string>('');
  const [activeBottomTab, setActiveBottomTab] = useState(0);
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
  const [showSearch, setShowSearch] = useState(true);
  const [lastScrollY, setLastScrollY] = useState(0);

  // –•—É–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const { categories, loading: categoriesLoading } = useCategories();

  // –ó–∞–≥—Ä—É–∑–∫–∞ initData –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ localStorage...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const urlParams = new URLSearchParams(window.location.search);
    const urlInitData = urlParams.get('initData');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const storedInitData = localStorage.getItem('telegram_init_data');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç Chrome —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    const extensionInitData = apiClient.checkExtensionHeaders();
    
    if (urlInitData) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω initData –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö');
      setManualInitData(decodeURIComponent(urlInitData));
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∏–∑–∏—Ç–æ–≤
      localStorage.setItem('telegram_init_data', decodeURIComponent(urlInitData));
    } else if (storedInitData) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω initData –≤ localStorage');
      setManualInitData(storedInitData);
    } else if (extensionInitData) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω initData –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö Chrome —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
      // initData —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ apiClient.checkExtensionHeaders()
    } else {
      console.log('‚ùå initData –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ URL, –Ω–∏ –≤ localStorage, –Ω–∏ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è—Ö');
    }
  }, []);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
  useEffect(() => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    if (!isReady || !stickerSets.length) return;
    
    if (!searchTerm) {
      console.log('üîç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã:', selectedCategories);
      fetchStickerSets();
    }
  }, [selectedCategories]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const checkAuth = async () => {
    console.log('üîç checkAuth –≤—ã–∑–≤–∞–Ω:');
    console.log('  isInTelegramApp:', isInTelegramApp);
    console.log('  initData:', initData ? `${initData.length} chars` : 'empty');
    console.log('  manualInitData:', manualInitData ? `${manualInitData.length} chars` : 'empty');
    console.log('  user:', user);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º manualInitData –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ initData –æ—Ç Telegram
    const currentInitData = manualInitData || initData;

    if (!isInTelegramApp && !manualInitData && !currentInitData) {
      // –í –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('üåê –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      setAuthStatus({
        authenticated: true,
        role: 'public'
      });
      return true;
    }
    
    if (!currentInitData) {
      console.log('‚ö†Ô∏è initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      setAuthStatus({
        authenticated: false,
        role: 'anonymous'
      });
      return false;
    }

    setAuthLoading(true);
    setAuthError(null);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è initData (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
      const isTestData = currentInitData.includes('query_id=test');
      if (!isTestData) {
        const initDataCheck = checkInitDataExpiry(currentInitData);
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ initData:', initDataCheck);
        if (!initDataCheck.valid) {
          throw new Error(initDataCheck.reason);
        }
      } else {
        console.log('üîç –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è');
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      apiClient.setAuthHeaders(currentInitData);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      const authResponse = await apiClient.checkAuthStatus();
      console.log('üîç –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authResponse);
      setAuthStatus(authResponse);

      if (!authResponse.authenticated) {
        throw new Error(authResponse.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      let errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      
      if (error instanceof Error) {
        if (error.message.includes('ENOTFOUND') || error.message.includes('getaddrinfo')) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
        } else if (error.message.includes('timeout')) {
          errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.';
        } else if (error.message.includes('Network Error')) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.';
        } else {
          errorMessage = error.message;
        }
      }
      
      setAuthError(errorMessage);
      return false;
    } finally {
      setAuthLoading(false);
    }
  };


  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
  const fetchStickerSets = async (page: number = 0) => {
    setLoading(true);
    setError(null);

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const response = await apiClient.getStickerSetsWithCategories(
        page, 
        20, 
        selectedCategories.length > 0 ? selectedCategories : undefined
      );
      setStickerSets(response.content || []);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:', error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      let errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤';
      
      if (error instanceof Error) {
        if (error.message.includes('ENOTFOUND') || error.message.includes('getaddrinfo')) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (error.message.includes('timeout')) {
          errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.';
        } else if (error.message.includes('Network Error')) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
        } else {
          errorMessage = error.message;
        }
      }
      
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
  const searchStickerSets = async (query: string) => {
    if (!query.trim()) {
      fetchStickerSets();
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await apiClient.searchStickerSets(query);
      setStickerSets(response.content || []);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤:', error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–∏—Å–∫–∞
      let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤';
      
      if (error instanceof Error) {
        if (error.message.includes('ENOTFOUND') || error.message.includes('getaddrinfo')) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
        } else if (error.message.includes('timeout')) {
          errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.';
        } else if (error.message.includes('Network Error')) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.';
        } else {
          errorMessage = error.message;
        }
      }
      
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const handleCategoriesChange = (newCategories: string[]) => {
    setSelectedCategories(newCategories);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const handleViewStickerSet = (id: number, _name: string) => {
    const stickerSet = stickerSets.find(s => s.id === id);
    if (stickerSet) {
      setSelectedStickerSet(stickerSet);
      setViewMode('detail');
    }
  };

  const handleShareStickerSet = (name: string, _title: string) => {
    if (tg) {
      tg.openTelegramLink(`https://t.me/addstickers/${name}`);
    } else {
      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
      window.open(`https://t.me/addstickers/${name}`, '_blank');
    }
  };

  const handleLikeStickerSet = (id: number, title: string) => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å API –¥–ª—è –ª–∞–π–∫–æ–≤
    console.log(`–õ–∞–π–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞: ${title} (ID: ${id})`);
    alert(`–õ–∞–π–∫ –¥–ª—è "${title}" –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –±—É–¥—É—â–µ–º!`);
  };

  const handleBackToList = () => {
    setViewMode('list');
    setSelectedStickerSet(null);
  };

  const handleCreateSticker = () => {
    if (tg) {
      tg.openTelegramLink('https://t.me/StickerGalleryBot');
    } else {
      window.open('https://t.me/StickerGalleryBot', '_blank');
    }
  };

  const handleMenuClick = () => {
    console.log('üîç –ú–µ–Ω—é –Ω–∞–∂–∞—Ç–æ');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
  };

  const handleOptionsClick = () => {
    console.log('üîç –û–ø—Ü–∏–∏ –Ω–∞–∂–∞—Ç—ã');
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –æ–ø—Ü–∏–π
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  const handleSearchChange = (newSearchTerm: string) => {
    setSearchTerm(newSearchTerm);
    // –î–µ–±–∞—É–Ω—Å –ø–æ–∏—Å–∫–∞
    const delayedSearch = setTimeout(() => {
      searchStickerSets(newSearchTerm);
    }, 500);

    return () => clearTimeout(delayedSearch);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø–æ–∏—Å–∫)
  const filteredStickerSets = stickerSets.filter(stickerSet =>
    stickerSet.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  console.log('üîç GalleryPage —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    stickerSets: stickerSets.length,
    filteredStickerSets: filteredStickerSets.length,
    searchTerm,
    viewMode,
    isInTelegramApp,
    isLoading,
    isAuthLoading
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const initializeApp = async () => {
      if (!isReady) return;
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      await checkAuth();
      
      // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã
      await fetchStickerSets();
    };
    
    initializeApp();
  }, [isReady, manualInitData]); // –î–æ–±–∞–≤–ª—è–µ–º manualInitData –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
  useEffect(() => {
    if (tg?.BackButton && tg.BackButton.isVisible !== undefined) {
      tg.BackButton.onClick(() => {
        if (viewMode === 'detail') {
          handleBackToList();
        } else {
          tg.close();
        }
      });

      if (viewMode === 'detail') {
        tg.BackButton.show();
      } else {
        tg.BackButton.hide();
      }
    }
  }, [tg, viewMode]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–≤–µ—Ä—Ö –∏–ª–∏ –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (currentScrollY < lastScrollY || currentScrollY < 100) {
        setShowSearch(true);
      } else if (currentScrollY > lastScrollY && currentScrollY > 100) {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–Ω–∏–∑, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        setShowSearch(false);
      }
      
      setLastScrollY(currentScrollY);
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [lastScrollY]);

  if (!isReady) {
    return <LoadingSpinner message="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..." />;
  }

  return (
    <Box sx={{ 
      minHeight: '100vh', 
      backgroundColor: 'transparent',
      paddingBottom: isInTelegramApp ? 0 : 8 // –û—Ç—Å—Ç—É–ø –¥–ª—è BottomNav –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Header 
        title="üé® –ì–∞–ª–µ—Ä–µ—è —Å—Ç–∏–∫–µ—Ä–æ–≤"
        onMenuClick={handleMenuClick}
        onOptionsClick={handleOptionsClick}
        initData={initData}
        user={user}
      />

      <Container 
        maxWidth={false} 
        sx={{ 
          maxWidth: 560, 
          mx: 'auto', 
          px: 1.5, 
          pt: 'calc(8px + env(safe-area-inset-top))',
          pb: 'calc(12px + env(safe-area-inset-bottom))',
          backgroundColor: 'transparent'
        }}
      >
        {viewMode === 'list' ? (
          <>
            {/* Sticky –ø–æ–∏—Å–∫ –∏ —á–∏–ø—ã */}
            <Box 
              className="tg-sticky" 
              sx={{ 
                px: 1, 
                py: 0.33, 
                mb: 0.67,
                transform: showSearch ? 'translateY(0)' : 'translateY(-100%)',
                opacity: showSearch ? 1 : 0,
                transition: 'transform 0.3s ease, opacity 0.3s ease',
                pointerEvents: showSearch ? 'auto' : 'none'
              }}
            >
              <MinimalSearchBar
                value={searchTerm}
                onChange={handleSearchChange}
                disabled={isLoading}
              />
              <Box sx={{ mt: 1 }}>
                <CategoriesFilter
                  categories={categories}
                  selectedCategories={selectedCategories}
                  onCategoriesChange={handleCategoriesChange}
                  loading={categoriesLoading}
                />
              </Box>
            </Box>

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
            {isLoading ? (
              <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤..." />
            ) : error ? (
              <ErrorDisplay error={error} onRetry={() => fetchStickerSets()} />
            ) : filteredStickerSets.length === 0 ? (
              <EmptyState
                title="üé® –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                message={searchTerm ? '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ —Å—Ç–∏–∫–µ—Ä–æ–≤'}
                actionLabel="–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä"
                onAction={handleCreateSticker}
              />
            ) : (
              <StickerSetList
                stickerSets={filteredStickerSets}
                onView={handleViewStickerSet}
                isInTelegramApp={isInTelegramApp}
              />
            )}
          </>
        ) : (
          // –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
          selectedStickerSet && (
            <StickerSetDetail
              stickerSet={selectedStickerSet}
              onBack={handleBackToList}
              onShare={handleShareStickerSet}
              onLike={handleLikeStickerSet}
              isInTelegramApp={isInTelegramApp}
            />
          )
        )}
      </Container>

      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <BottomNav
        activeTab={activeBottomTab}
        onChange={setActiveBottomTab}
        isInTelegramApp={isInTelegramApp}
      />

    </Box>
  );
};
