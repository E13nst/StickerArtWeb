import React, { useEffect, useState, useRef } from 'react';
import { Container, Box } from '@mui/material';
import { useTelegram } from '@/hooks/useTelegram';
import { useStickerStore } from '@/store/useStickerStore';
import { apiClient } from '@/api/client';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { Header } from '@/components/Header';
import MinimalSearchBar from '@/components/MinimalSearchBar';
import { CategoriesFilter } from '@/components/CategoriesFilter';
import { StickerSetList } from '@/components/StickerSetList';
import { StickerSetDetail } from '@/components/StickerSetDetail';
import { LoadingSpinner } from '@/components/LoadingSpinner';
import { ErrorDisplay } from '@/components/ErrorDisplay';
import { EmptyState } from '@/components/EmptyState';
import { BottomNav } from '@/components/BottomNav';

// –•—É–∫–∏
import { useCategories } from '@/hooks/useCategories';
import { useScrollHue } from '@/hooks/useScrollHue';
import { useTgSafeArea } from '@/telegram/useTgSafeArea';
import { logger } from '@/utils/logger';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

export const GalleryPage: React.FC = () => {
  // –•—É–∫ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –æ—Ç—Ç–µ–Ω–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
  useScrollHue(190, 255);
  
  // –•—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–æ–Ω Telegram
  useTgSafeArea();

  const { tg, user, initData, isReady, isInTelegramApp, checkInitDataExpiry } = useTelegram();
  const {
    isLoading,
    isAuthLoading,
    stickerSets,
    authStatus: _authStatus,
    error,
    authError,
    searchTerm,
    selectedCategories,
    viewMode,
    selectedStickerSet,
    setAuthStatus,
    setStickerSets,
    setLoading,
    setAuthLoading,
    setError,
    setAuthError,
    setSearchTerm,
    setSelectedCategories,
    setViewMode,
    setSelectedStickerSet
  } = useStickerStore();

  const { categories, loading: categoriesLoading } = useCategories();

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
  const [showSearch, setShowSearch] = useState(true);
  const lastScrollY = useRef(0);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const [activeBottomTab, setActiveBottomTab] = useState(0);

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const authenticateUser = async (currentInitData: string) => {
    if (!currentInitData || currentInitData === 'undefined') {
      logger.warn('‚ö†Ô∏è InitData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
      setAuthStatus({
        authenticated: false,
        message: 'InitData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      });
      return false;
    }

    setAuthLoading(true);
    setAuthError(null);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è initData (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
      const isTestData = currentInitData.includes('query_id=test');
      if (!isTestData) {
        const initDataCheck = checkInitDataExpiry(currentInitData);
        logger.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ initData:', initDataCheck);
        if (!initDataCheck.valid) {
          throw new Error(initDataCheck.reason);
        }
      } else {
        logger.log('üîç –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è');
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      apiClient.setAuthHeaders(currentInitData);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      logger.log('üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      const authResponse = await apiClient.checkAuthStatus();
      logger.log('üîç –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authResponse);
      setAuthStatus(authResponse);

      if (!authResponse.authenticated) {
        throw new Error(authResponse.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.';
      
      if (error instanceof Error) {
        if (error.message.includes('ENOTFOUND') || error.message.includes('getaddrinfo')) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
        } else if (error.message.includes('timeout')) {
          errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.';
        } else if (error.message.includes('Network Error')) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.';
        } else {
          errorMessage = error.message;
        }
      }
      
      setAuthError(errorMessage);
    } finally {
      setAuthLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
  const fetchStickerSets = async (page: number = 0) => {
    setLoading(true);
    setError(null);

    try {
      logger.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤...');
      const response = await apiClient.getStickerSetsWithCategories(
        page,
        20,
        (selectedCategories || []).length > 0 ? selectedCategories : undefined
      );
      
      logger.log('üîç –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã:', response);
      
      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      const shuffledContent = shuffleArray(response.content || []);
      setStickerSets(shuffledContent);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤:', error);
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∏–∫–µ—Ä–æ–≤.';
      
      if (error instanceof Error) {
        if (error.message.includes('ENOTFOUND') || error.message.includes('getaddrinfo')) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (error.message.includes('timeout')) {
          errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ.';
        } else if (error.message.includes('Network Error')) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
        } else {
          errorMessage = error.message;
        }
      }
      
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
  const searchStickerSets = async (query: string) => {
    if (!query.trim()) {
      fetchStickerSets();
      return;
    }

    setLoading(true);
    setError(null);

    try {
      logger.log('üîç –ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤:', query);
      const response = await apiClient.searchStickerSets(query);
      logger.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', response);
      
      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      const shuffledContent = shuffleArray(response.content || []);
      setStickerSets(shuffledContent);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤:', error);
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∏–∫–µ—Ä–æ–≤.';
      
      if (error instanceof Error) {
        if (error.message.includes('ENOTFOUND') || error.message.includes('getaddrinfo')) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
        } else if (error.message.includes('timeout')) {
          errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.';
        } else if (error.message.includes('Network Error')) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.';
        } else {
          errorMessage = error.message;
        }
      }
      
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleCategoriesChange = (newCategories: string[]) => {
    setSelectedCategories(newCategories);
  };

  const handleViewStickerSet = (id: number, _name: string) => {
    logger.log('üîç handleViewStickerSet –≤—ã–∑–≤–∞–Ω:', { id, name: _name });
    const stickerSet = stickerSets.find(s => s.id === id);
    logger.log('üîç –ù–∞–π–¥–µ–Ω —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç:', stickerSet);
    if (stickerSet) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞
      logger.log('üîç –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ detail —Ä–µ–∂–∏–º');
      setSelectedStickerSet(stickerSet);
      setViewMode('detail');
    }
  };

  const handleShareStickerSet = (name: string, _title: string) => {
    if (tg) {
      tg.openTelegramLink(`https://t.me/addstickers/${name}`);
    } else {
      window.open(`https://t.me/addstickers/${name}`, '_blank');
    }
  };

  const handleLikeStickerSet = (id: number, title: string) => {
    logger.log(`–õ–∞–π–∫ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–∞: ${title} (ID: ${id})`);
  };

  const handleBackToList = () => {
    setViewMode('list');
  };

  const handleCreateSticker = () => {
    if (tg) {
      tg.openTelegramLink('https://t.me/StickerGalleryBot');
    } else {
      window.open('https://t.me/StickerGalleryBot', '_blank');
    }
  };

  const handleMenuClick = () => {
    logger.log('üîç –ú–µ–Ω—é –Ω–∞–∂–∞—Ç–æ');
  };

  const handleOptionsClick = () => {
    logger.log('üîç –û–ø—Ü–∏–∏ –Ω–∞–∂–∞—Ç—ã');
  };

  const handleBottomNavChange = (newValue: number) => {
    setActiveBottomTab(newValue);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  const handleSearchChange = (newSearchTerm: string) => {
    setSearchTerm(newSearchTerm);

    const delayedSearch = setTimeout(() => {
      searchStickerSets(newSearchTerm);
    }, 500);

    return () => clearTimeout(delayedSearch);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
  const filteredStickerSets = stickerSets.filter(stickerSet =>
    stickerSet.title.toLowerCase().includes((searchTerm || '').toLowerCase())
  );

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  useEffect(() => {
  logger.log('üîç GalleryPage —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    stickerSets: stickerSets.length,
    filteredStickerSets: filteredStickerSets.length,
    searchTerm: searchTerm || '',
    viewMode: viewMode || 'list',
    isInTelegramApp,
    categories: categories.length,
    isLoading,
    isAuthLoading,
    error,
    authError,
    selectedStickerSet: selectedStickerSet?.id,
    selectedStickerSetTitle: selectedStickerSet?.title
  });
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const initializeApp = async () => {
      if (!isReady) return;

      logger.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
      
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await authenticateUser(initData);
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä—Å–µ—Ç–æ–≤
      await fetchStickerSets();
    };

    initializeApp();
  }, [isReady, initData]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ BackButton
  useEffect(() => {
    if (tg?.BackButton && tg.BackButton.isVisible !== undefined) {
      if (viewMode === 'detail') {
        tg.BackButton.onClick(() => {
          handleBackToList();
        });
        tg.BackButton.show();
      } else {
        tg.BackButton.hide();
      }
    }
  }, [tg, viewMode]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    const handleScroll = () => {
      const currentScrollY = window.scrollY;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É
      if (currentScrollY < lastScrollY.current || currentScrollY < 50) {
        setShowSearch(true);
      } else if (currentScrollY > lastScrollY.current && currentScrollY > 150) {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ –≤–Ω–∏–∑
        setShowSearch(false);
      }

      lastScrollY.current = currentScrollY;
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  if (!isReady) {
    return <LoadingSpinner message="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..." />;
  }

  if (authError) {
    return (
      <Box className="space-root fx-safe" sx={{ minHeight: '100vh' }}>
        <Header />
        <Container maxWidth={false} sx={{ 
          maxWidth: 560, 
          mx: 'auto', 
          px: 1.5, 
          pt: 'calc(8px + env(safe-area-inset-top))', 
          pb: 'calc(12px + env(safe-area-inset-bottom))',
          backgroundColor: 'transparent'
        }}>
          <ErrorDisplay 
            error={authError || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'} 
            onRetry={() => authenticateUser(initData)} 
          />
        </Container>
      </Box>
    );
  }

  if (error) {
    return (
      <Box className="space-root fx-safe" sx={{ minHeight: '100vh' }}>
        <Header />
        <Container maxWidth={false} sx={{ 
          maxWidth: 560, 
          mx: 'auto', 
          px: 1.5, 
          pt: 'calc(8px + env(safe-area-inset-top))', 
          pb: 'calc(12px + env(safe-area-inset-bottom))',
          backgroundColor: 'transparent'
        }}>
          <ErrorDisplay 
            error={error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'} 
            onRetry={() => fetchStickerSets()} 
          />
        </Container>
      </Box>
    );
  }

  return (
    <Box className="fx-safe" sx={{ minHeight: '100vh', position: 'relative', zIndex: 1 }}>
      <Header />
      
      <Container maxWidth={false} sx={{ 
        maxWidth: 560, 
        mx: 'auto', 
        px: 1.5, 
        pt: 'calc(8px + env(safe-area-inset-top))', 
        pb: 'calc(12px + env(safe-area-inset-bottom))',
        backgroundColor: 'transparent'
      }}>
        {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
        <Box
          className="tg-sticky"
          sx={{
            px: 1,
            py: 0.33,
            mb: 0.67,
            transform: showSearch ? 'translateY(0)' : 'translateY(-100%)',
            opacity: showSearch ? 1 : 0,
            transition: 'all 0.3s ease',
            pointerEvents: showSearch ? 'auto' : 'none',
            top: 0
          }}
        >
          <MinimalSearchBar 
            value={searchTerm}
            onChange={handleSearchChange}
            placeholder="–ü–æ–∏—Å–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤..."
          />
        </Box>

        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <Box
          className="tg-sticky"
          sx={{
            px: 1,
            py: 1,
            mb: 1,
            top: showSearch ? '60px' : '0px',
            transition: 'top 0.3s ease'
          }}
        >
          <CategoriesFilter
            categories={categories}
            selectedCategories={selectedCategories}
            onCategoriesChange={handleCategoriesChange}
            loading={categoriesLoading}
          />
        </Box>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        {(viewMode || 'list') === 'list' ? (
          <>
            {isLoading && stickerSets.length === 0 ? (
              <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤..." />
            ) : filteredStickerSets.length === 0 ? (
              <EmptyState 
                title={(searchTerm || '') ? "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" : "–°—Ç–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
                message={(searchTerm || '') ? "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å" : "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"}
                actionLabel="–û–±–Ω–æ–≤–∏—Ç—å"
                onAction={() => fetchStickerSets()}
              />
            ) : (
              <StickerSetList
                stickerSets={filteredStickerSets}
                onView={handleViewStickerSet}
                isInTelegramApp={isInTelegramApp}
              />
            )}
          </>
        ) : selectedStickerSet ? (
          <StickerSetDetail
            stickerSet={selectedStickerSet}
            onBack={handleBackToList}
            onShare={handleShareStickerSet}
            onLike={handleLikeStickerSet}
            isInTelegramApp={isInTelegramApp}
          />
        ) : (
          <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π..." />
        )}
      </Container>

      <BottomNav 
        activeTab={activeBottomTab}
        onChange={handleBottomNavChange}
        isInTelegramApp={isInTelegramApp}
      />
    </Box>
  );
};