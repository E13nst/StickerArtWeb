import { StickerSetResponse, Sticker } from '@/types/sticker';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é
interface PredefinedPreview {
  stickerSetId: number;
  stickerIndex: number;
  sticker: Sticker;
  priority: number; // 1-–≤—ã—Å—à–∏–π, 2-—Å—Ä–µ–¥–Ω–∏–π, 3-–Ω–∏–∑–∫–∏–π
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–≤—å—é
export class StickerPreloader {
  private predefinedPreviews: PredefinedPreview[] = [];
  private loadedPreviews = new Set<string>();
  private loadingPromises = new Map<string, Promise<boolean>>();

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –∏ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–≤—å—é
  generatePredefinedPreviews(stickerSets: StickerSetResponse[]): PredefinedPreview[] {
    logger.log('üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–≤—å—é –¥–ª—è', stickerSets.length, '—Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤');
    
    this.predefinedPreviews = [];
    
    stickerSets.forEach((stickerSet, setIndex) => {
      const stickers = stickerSet.telegramStickerSetInfo?.stickers || [];
      
      if (stickers.length === 0) return;
      
      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
      const shuffledStickers = this.shuffleArray(stickers);
      const previewStickers = shuffledStickers.slice(0, 3);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
      let basePriority = 1; // –ü–µ—Ä–≤—ã–µ 4 —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      if (setIndex >= 4 && setIndex < 8) basePriority = 2; // –°–ª–µ–¥—É—é—â–∏–µ 4 - —Å—Ä–µ–¥–Ω–∏–π
      else if (setIndex >= 8) basePriority = 3; // –û—Å—Ç–∞–ª—å–Ω—ã–µ - –Ω–∏–∑–∫–∏–π
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–≤—å—é
      previewStickers.forEach((sticker, stickerIndex) => {
        this.predefinedPreviews.push({
          stickerSetId: stickerSet.id,
          stickerIndex,
          sticker,
          priority: basePriority
        });
      });
    });
    
    logger.log('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ', this.predefinedPreviews.length, '–ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–≤—å—é');
    return this.predefinedPreviews;
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
  getPreviewsForStickerSet(stickerSetId: number): Sticker[] {
    const previews = this.predefinedPreviews
      .filter(p => p.stickerSetId === stickerSetId)
      .sort((a, b) => a.stickerIndex - b.stickerIndex)
      .map(p => p.sticker);
    
    logger.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–µ–≤—å—é –¥–ª—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞', stickerSetId, ':', previews.length);
    return previews;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  async loadPreviewsByPriority(): Promise<void> {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const priorityGroups = {
      1: this.predefinedPreviews.filter(p => p.priority === 1),
      2: this.predefinedPreviews.filter(p => p.priority === 2),
      3: this.predefinedPreviews.filter(p => p.priority === 3)
    };

    logger.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:', {
      –≤—ã—Å—à–∏–π: priorityGroups[1].length,
      —Å—Ä–µ–¥–Ω–∏–π: priorityGroups[2].length,
      –Ω–∏–∑–∫–∏–π: priorityGroups[3].length
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    for (const priority of [1, 2, 3] as const) {
      const group = priorityGroups[priority];
      if (group.length === 0) continue;

      logger.log(`üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ ${priority} (${group.length} –ø—Ä–µ–≤—å—é)`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–µ–≤—å—é –≤ –≥—Ä—É–ø–ø–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const loadPromises = group.map(preview => this.loadPreview(preview));
      await Promise.allSettled(loadPromises);
      
      logger.log(`‚úÖ –ì—Ä—É–ø–ø–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ ${priority} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–Ω–æ –ø—Ä–µ–≤—å—é —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  private async loadPreview(preview: PredefinedPreview): Promise<boolean> {
    const cacheKey = `${preview.stickerSetId}-${preview.stickerIndex}`;
    
    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if (this.loadedPreviews.has(cacheKey)) {
      return true;
    }
    
    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    if (this.loadingPromises.has(cacheKey)) {
      return this.loadingPromises.get(cacheKey)!;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏
    const loadPromise = this.loadSinglePreview(preview);
    this.loadingPromises.set(cacheKey, loadPromise);
    
    try {
      const success = await loadPromise;
      if (success) {
        this.loadedPreviews.add(cacheKey);
      }
      return success;
    } finally {
      this.loadingPromises.delete(cacheKey);
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–Ω–æ –ø—Ä–µ–≤—å—é
  private async loadSinglePreview(preview: PredefinedPreview): Promise<boolean> {
    const sticker = preview.sticker;
    const url = sticker.is_animated 
      ? `/api/stickers/${sticker.file_id}` // –î–ª—è Lottie
      : `/api/stickers/${sticker.file_id}`; // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    try {
      if (sticker.is_animated) {
        // –î–ª—è Lottie –∑–∞–≥—Ä—É–∂–∞–µ–º JSON
        const response = await fetch(url);
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const lottieData = await response.json();
        logger.log('‚úÖ Lottie –∑–∞–≥—Ä—É–∂–µ–Ω:', sticker.file_id);
        return true;
      } else {
        // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º
        const img = new Image();
        img.crossOrigin = 'anonymous';
        
        return new Promise((resolve) => {
          img.onload = () => {
            logger.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', sticker.file_id);
            resolve(true);
          };
          img.onerror = () => {
            logger.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', sticker.file_id);
            resolve(false);
          };
          img.src = url;
        });
      }
    } catch (error) {
      logger.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é:', sticker.file_id, error);
      return false;
    }
  }

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
  private shuffleArray<T>(array: T[]): T[] {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
  getLoadingStats() {
    return {
      total: this.predefinedPreviews.length,
      loaded: this.loadedPreviews.size,
      loading: this.loadingPromises.size,
      progress: this.predefinedPreviews.length > 0 
        ? (this.loadedPreviews.size / this.predefinedPreviews.length * 100).toFixed(1) 
        : '0'
    };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const stickerPreloader = new StickerPreloader();
