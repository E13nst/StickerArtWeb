import React from 'react';
import { logger } from '@/utils/logger';

// –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
class ImageCache {
  private cache = new Map<string, HTMLImageElement>();
  private loadingPromises = new Map<string, Promise<HTMLImageElement>>();
  private maxSize = 100; // –ú–∞–∫—Å–∏–º—É–º 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–µ—à–µ

  async loadImage(src: string): Promise<HTMLImageElement> {
    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (this.cache.has(src)) {
      logger.log('üì¶ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞:', src);
      return this.cache.get(src)!;
    }

    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∂–¥–µ–º –µ–≥–æ
    if (this.loadingPromises.has(src)) {
      logger.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', src);
      return this.loadingPromises.get(src)!;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏
    const promise = new Promise<HTMLImageElement>((resolve, reject) => {
      const img = new Image();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
      img.crossOrigin = 'anonymous'; // –î–ª—è CORS –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      
      img.onload = () => {
        logger.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–æ:', src);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
        this.addToCache(src, img);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ø—Ä–æ–º–∏—Å–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
        this.loadingPromises.delete(src);
        
        resolve(img);
      };
      
      img.onerror = (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', src, error);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ø—Ä–æ–º–∏—Å–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
        this.loadingPromises.delete(src);
        
        reject(error);
      };
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º src –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏
      // –ë—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      img.src = src;
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏
    this.loadingPromises.set(src, promise);
    
    return promise;
  }

  private addToCache(src: string, img: HTMLImageElement) {
    // –ï—Å–ª–∏ –∫–µ—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (this.cache.size >= this.maxSize) {
      const firstKey = this.cache.keys().next().value;
      this.cache.delete(firstKey);
      logger.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞:', firstKey);
    }
    
    this.cache.set(src, img);
  }

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  preloadImages(srcs: string[]): Promise<void[]> {
    return Promise.allSettled(
      srcs.map(src => this.loadImage(src))
    ).then(results => {
      const errors = results.filter(result => result.status === 'rejected');
      if (errors.length > 0) {
        logger.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å:', errors.length);
      }
      return [];
    });
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  clear() {
    this.cache.clear();
    this.loadingPromises.clear();
    logger.log('üßπ –ö–µ—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω');
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
  getStats() {
    return {
      cachedImages: this.cache.size,
      loadingImages: this.loadingPromises.size,
      maxSize: this.maxSize
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–µ—à–∞
export const imageCache = new ImageCache();

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–µ—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export function useImageCache(src: string) {
  const [image, setImage] = React.useState<HTMLImageElement | null>(null);
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState(false);

  React.useEffect(() => {
    if (!src) return;

    setLoading(true);
    setError(false);

    imageCache.loadImage(src)
      .then((img) => {
        setImage(img);
        setLoading(false);
      })
      .catch(() => {
        setError(true);
        setLoading(false);
      });
  }, [src]);

  return { image, loading, error };
}
